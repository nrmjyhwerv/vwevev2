<%- include('components/template') %>
<%- include('components/instance') %>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.js"
    integrity="sha512-2PRgAav8Os8vLcOAh1gSaDoNLe1fAyq8/G3QSdyjFFD+OqNjLeHE/8q4+S4MEZgPsuo+itHopj+hJvqS8XUQ8A=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.css"
    integrity="sha512-iLYuqv+v/P4u9erpk+KM83Ioe/l7SEmr7wB6g+Kg1qmEit8EShDKnKtLHlv2QXUp7GGJhmqDI+1PhJYLTsfb8w=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/attach/attach.min.js"
    integrity="sha512-43J76SR5UijcuJTzs73z8NpkyWon8a8EoV+dX6obqXW7O26Yb268H2vP6EiJjD7sWXqxS3G/YOqPyyLF9fmqgA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/fit/fit.min.js"
    integrity="sha512-+wh8VA1djpWk3Dj9/IJDu6Ufi4vVQ0zxLv9Vmfo70AbmYFJm0z3NLnV98vdRKBdPDV4Kwpi7EZdr8mDY9L8JIA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/emoji-picker-element@^1/index.js"></script>
<style>
    /* Improved Mobile Styles */
    @media (max-width: 768px) {
        .mobile-stack {
            flex-direction: column !important;
        }
        .mobile-full-width {
            width: 100% !important;
            margin-right: 0 !important;
            margin-left: 0 !important;
        }
        .mobile-px-4 {
            padding-left: 1rem !important;
            padding-right: 1rem !important;
        }
        .mobile-mt-4 {
            margin-top: 1rem !important;
        }
        .mobile-text-center {
            text-align: center !important;
        }
        #terminal {
            height: 300px !important;
        }
        .player-action-buttons {
            grid-template-columns: repeat(2, 1fr) !important;
        }
        .advanced-player-actions {
            grid-template-columns: 1fr !important;
        }
    }

    /* General Improvements */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
        z-index: 1000;
        backdrop-filter: blur(5px);
    }

    .modal-overlay.active {
        opacity: 1;
        visibility: visible;
    }

    .xterm-viewport {
        overflow-y: hidden !important;
        border-radius: 0 0 0.75rem 0.75rem;
    }

    /* Player Management */
    #player-management {
        transition: all 0.3s ease;
        overflow: hidden;
        position: relative;
    }

    #player-management.collapsed {
        max-height: 60px;
    }

    .toggle-player-management {
        cursor: pointer;
        user-select: none;
    }

    .player-card {
        transition: all 0.2s ease;
        position: relative;
    }

    .player-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .player-action-buttons {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 0.5rem;
    }

    .advanced-player-actions {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 0.5rem;
    }

    /* Status Box with Controls */
    .status-box {
        position: relative;
        min-height: 120px;
    }

    .status-controls {
        position: absolute;
        bottom: 1rem;
        right: 1rem;
        display: flex;
        gap: 0.5rem;
    }

    .status-controls button {
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        padding: 0;
        transition: transform 0.2s;
    }

    .status-controls button:hover {
        transform: scale(1.1);
    }

    /* Loading Popup */
    #loadingPopup {
        display: none;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.3s, transform 0.3s;
    }

    #loadingPopup.active {
        display: flex;
        opacity: 1;
        pointer-events: auto;
    }

    #loadingBar {
        transition: width 0.4s;
    }

    /* Console Improvements */
    #terminal-container {
        border-radius: 0.75rem;
        background: #101010;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    #terminal-header {
        background: #151515;
        border-radius: 0.75rem 0.75rem 0 0;
        padding: 0.75rem 1rem;
        font-family: monospace;
        color: #aaa;
        font-size: 0.875rem;
        display: flex;
        justify-content: space-between;
    }

    #input {
        border-radius: 0 0 0.75rem 0.75rem;
        background: #151515;
        border: none;
        border-top: 1px solid #252525;
    }

    /* Online Players List */
    .online-players-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 0.5rem;
    }

    /* Charts */
    canvas {
        position: absolute;
        left: 0;
        top: 0;
        width: 100% !important;
        height: 100% !important;
    }

    /* Uptime badges */
    .uptime-badge {
        min-width: 40px;
        text-align: center;
    }

    /* Player avatar placeholder */
    .player-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background-color: #3b82f6;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        margin-right: 8px;
        background-size: cover;
        background-position: center;
    }

    /* Player head display */
    .player-head {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background-color: #3b82f6;
        background-size: cover;
        background-position: center;
        margin-right: 8px;
    }

    /* Tab system */
    .tab-container {
        display: flex;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        margin-bottom: 1rem;
    }

    .tab {
        padding: 0.5rem 1rem;
        cursor: pointer;
        border-bottom: 2px solid transparent;
        transition: all 0.2s;
    }

    .tab.active {
        border-bottom: 2px solid #6366f1;
        color: #6366f1;
    }

    .tab:hover:not(.active) {
        border-bottom: 2px solid rgba(255, 255, 255, 0.2);
    }

    .tab-content {
        display: none;
    }

    .tab-content.active {
        display: block;
    }

    /* Whitelist management */
    .whitelist-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        border-radius: 0.25rem;
        transition: background-color 0.2s;
    }

    .whitelist-item:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }

    /* Ban list management */
    .ban-item {
        padding: 0.75rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: rgba(255, 0, 0, 0.05);
    }

    /* OP list management */
    .op-item {
        padding: 0.75rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: rgba(59, 130, 246, 0.05);
    }

    /* Player search */
    .player-search-container {
        position: relative;
    }

    .player-search-results {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: #1e1e2d;
        border-radius: 0.25rem;
        max-height: 200px;
        overflow-y: auto;
        z-index: 10;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        display: none;
    }

    .player-search-result {
        padding: 0.5rem;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .player-search-result:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }

    /* Emoji picker */
    .emoji-picker-container {
        position: absolute;
        right: 0;
        bottom: 100%;
        z-index: 10;
        display: none;
    }

    /* Player teleportation */
    .teleport-options {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 0.5rem;
    }

    /* Player effects */
    .effect-options {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 0.5rem;
    }

    /* Player gamemode selector */
    .gamemode-selector {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 0.5rem;
    }

    /* Player inventory viewer */
    .inventory-viewer {
        display: grid;
        grid-template-columns: repeat(9, 1fr);
        gap: 0.25rem;
    }

    .inventory-slot {
        aspect-ratio: 1/1;
        background-color: rgba(255, 255, 255, 0.05);
        border-radius: 0.25rem;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }

    .inventory-slot img {
        max-width: 80%;
        max-height: 80%;
    }

    .inventory-slot-count {
        position: absolute;
        bottom: 2px;
        right: 2px;
        font-size: 0.6rem;
        background: rgba(0, 0, 0, 0.7);
        border-radius: 50%;
        width: 14px;
        height: 14px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Player statistics */
    .player-stats-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;
    }

    /* Server properties editor */
    .server-property {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }

    /* Server world management */
    .world-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: rgba(255, 255, 255, 0.03);
    }

    /* Plugin management */
    .plugin-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: rgba(255, 255, 255, 0.03);
    }

    /* Backup management */
    .backup-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: rgba(255, 255, 255, 0.03);
    }

    /* Animation for buttons */
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }

    .pulse-animation {
        animation: pulse 1.5s infinite;
    }

    /* Tooltips */
    .tooltip {
        position: relative;
    }

    .tooltip .tooltip-text {
        visibility: hidden;
        width: 120px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 5px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
    }

    .tooltip:hover .tooltip-text {
        visibility: visible;
        opacity: 1;
    }

    /* Custom scrollbar */
    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    ::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.05);
    }

    ::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    /* Status indicators */
    .status-indicator {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 6px;
    }

    .status-online {
        background-color: #10b981;
    }

    .status-offline {
        background-color: #ef4444;
    }

    .status-idle {
        background-color: #f59e0b;
    }

    /* Player health bar */
    .health-bar {
        height: 4px;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 2px;
        overflow: hidden;
        margin-top: 2px;
    }

    .health-bar-fill {
        height: 100%;
        background-color: #ef4444;
        transition: width 0.3s;
    }

    /* Player armor display */
    .armor-display {
        display: flex;
        gap: 2px;
    }

    .armor-piece {
        width: 12px;
        height: 12px;
        background-color: rgba(59, 130, 246, 0.3);
        border-radius: 2px;
    }

    .armor-piece.filled {
        background-color: #3b82f6;
    }

    /* Player effects display */
    .effects-display {
        display: flex;
        gap: 4px;
        flex-wrap: wrap;
    }

    .effect-icon {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background-color: rgba(139, 92, 246, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 10px;
    }

    /* Player action logs */
    .action-log {
        font-family: monospace;
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.7);
        border-left: 2px solid rgba(255, 255, 255, 0.1);
        padding-left: 0.5rem;
        margin-bottom: 0.25rem;
    }

    /* Player permissions editor */
    .permissions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 0.5rem;
    }

    /* Server resource packs */
    .resource-pack-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: rgba(255, 255, 255, 0.03);
    }

    /* Server datapacks */
    .datapack-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: rgba(255, 255, 255, 0.03);
    }

    /* Server scheduled tasks */
    .scheduled-task {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: rgba(255, 255, 255, 0.03);
    }

    /* Server performance graphs */
    .performance-graph {
        height: 100px;
        background-color: rgba(255, 255, 255, 0.03);
        border-radius: 0.25rem;
        position: relative;
    }

    /* Server file manager */
    .file-item {
        display: flex;
        align-items: center;
        padding: 0.5rem;
        border-radius: 0.25rem;
        margin-bottom: 0.25rem;
        cursor: pointer;
    }

    .file-item:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }

    /* Server world border */
    .world-border-display {
        height: 200px;
        background-color: rgba(255, 255, 255, 0.03);
        border-radius: 0.25rem;
        position: relative;
        overflow: hidden;
    }

    /* Server scoreboard */
    .scoreboard-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        border-radius: 0.25rem;
        margin-bottom: 0.25rem;
    }

    /* Server teams */
    .team-item {
        padding: 0.75rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: rgba(255, 255, 255, 0.03);
    }

    /* Server advancements */
    .advancement-item {
        padding: 0.75rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: rgba(255, 255, 255, 0.03);
    }

    /* Server recipes */
    .recipe-item {
        padding: 0.75rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: rgba(255, 255, 255, 0.03);
    }
</style>

<main id="content" class="mobile-px-4">
   <!-- Connection Error Banner -->
   <div class="rounded-xl bg-red-800/10 px-4 py-6 mt-4 mb-6 hidden" id="cryptalisIsDown">
        <div class="flex">
            <div class="flex-shrink-0 ml-1.5">
                <svg class="animate-spin mt-2 h-5 w-5 text-red-400" xmlns="http://www3.org/0/svg"
                    fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                    </circle>
                    <path class="opacity-75" fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                    </path>
                </svg>
            </div>
            <div class="ml-5">
                <h3 class="text-sm font-medium text-red-400"><%= req.translations.connectionFailure %></h3>
                <div class="text-sm text-red-400/50">
                    <p><%= req.translations.connectionFailureText %></p>
                </div>
            </div>
        </div>
    </div>

    <!-- Player Management Section -->
    <div id="player-management" class="bg-white/5 rounded-xl p-6 w-full mb-6">
        <div class="flex justify-between items-center mb-4 toggle-player-management">
            <h2 class="text-lg font-semibold text-white flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                </svg>
                Player Management
            </h2>
            <svg id="toggle-icon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 transform rotate-0 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
        </div>

        <div id="player-management-content">
            <!-- Tab System -->
            <div class="tab-container">
                <div class="tab active" data-tab="online">Online Players</div>
                <div class="tab" data-tab="whitelist">Whitelist</div>
                <div class="tab" data-tab="bans">Bans</div>
                <div class="tab" data-tab="ops">OPs</div>
                <div class="tab" data-tab="actions">Advanced Actions</div>
            </div>

            <!-- Online Players Tab -->
            <div class="tab-content active" id="online-tab">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <div class="mb-4">
                            <label for="player-name" class="block text-sm font-medium text-gray-300 mb-2">Player Name</label>
                            <div class="flex gap-2">
                                <div class="player-search-container flex-1">
                                    <input type="text" id="player-name" class="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg text-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Enter player name" autocomplete="off">
                                    <div class="player-search-results" id="player-search-results"></div>
                                </div>
                                <button onclick="refreshPlayerList()" class="px-3 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                    </svg>
                                    Refresh
                                </button>
                            </div>
                        </div>

                        <div class="bg-black/20 rounded-lg p-4">
                            <h3 class="text-sm font-medium text-gray-300 mb-3">Quick Actions</h3>
                            <div class="player-action-buttons">
                                <button onclick="executePlayerAction('kick')" class="px-2 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition text-sm flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192l-3.536 3.536M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z" />
                                    </svg>
                                    Kick
                                </button>
                                <button onclick="executePlayerAction('ban')" class="px-2 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition text-sm flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636" />
                                    </svg>
                                    Ban
                                </button>
                                <button onclick="executePlayerAction('pardon')" class="px-2 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition text-sm flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    Unban
                                </button>
                                <button onclick="executePlayerAction('op')" class="px-2 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition text-sm flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                                    </svg>
                                    OP
                                </button>
                                <button onclick="executePlayerAction('deop')" class="px-2 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition text-sm flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                                    </svg>
                                    De-OP
                                </button>
                                <button onclick="executePlayerAction('whitelist add')" class="px-2 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg transition text-sm flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                    </svg>
                                    Whitelist
                                </button>
                            </div>
                        </div>

                        <!-- Player Information Section -->
                        <div class="bg-black/20 rounded-lg p-4 mt-4">
                            <h3 class="text-sm font-medium text-gray-300 mb-3">Player Information</h3>
                            <div id="player-info" class="text-sm text-gray-300">
                                <p>Select a player to view detailed information</p>
                            </div>
                        </div>
                    </div>

                    <div>
                        <div class="flex justify-between items-center mb-3">
                            <h3 class="text-sm font-medium text-gray-300 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.636 18.364a9 9 0 010-12.728m12.728 0a9 9 0 010 12.728m-9.9-2.829a5 5 0 010-7.07m7.072 0a5 5 0 010 7.07M13 12a1 1 0 11-2 0 1 1 0 012 0z" />
                                </svg>
                                Online Players (<span id="online-count">0</span>)
                            </h3>
                            <span id="playerCount" class="text-xs bg-green-600/20 text-green-400 px-2 py-1 rounded-full">online</span>
                        </div>
                        <div id="online-players" class="bg-black/20 rounded-lg p-3 h-96 overflow-y-auto">
                            <div class="online-players-grid" id="players-grid">
                                <p class="text-sm text-gray-400 text-center col-span-2 mt-16">No players online or data not available</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Advanced Player Management -->
                <div class="mt-6 pt-6 border-t border-white/10">
                    <h3 class="text-sm font-medium text-gray-300 mb-3 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                        Advanced Player Management
                    </h3>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label class="block text-xs font-medium text-gray-400 mb-1">Custom Command</label>
                            <div class="flex">
                                <input type="text" id="custom-command" class="flex-1 px-3 py-2 bg-white/5 border border-white/10 rounded-l-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="e.g. gamemode creative {player}">
                                <button onclick="executeCustomCommand()" class="px-3 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-r-lg transition text-sm">
                                    Execute
                                </button>
                            </div>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-400 mb-1">Ban Reason</label>
                            <input type="text" id="ban-reason" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Optional ban reason">
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-400 mb-1">Kick Reason</label>
                            <input type="text" id="kick-reason" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Optional kick reason">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Whitelist Tab -->
            <div class="tab-content" id="whitelist-tab">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-300 mb-2">Whitelist Management</label>
                            <div class="flex gap-2">
                                <input type="text" id="whitelist-name" class="flex-1 px-4 py-2 bg-white/5 border border-white/10 rounded-lg text-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Enter player name">
                                <button onclick="whitelistAddPlayer()" class="px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                    </svg>
                                    Add
                                </button>
                                <button onclick="whitelistRemovePlayer()" class="px-3 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                                    </svg>
                                    Remove
                                </button>
                            </div>
                        </div>

                        <div class="bg-black/20 rounded-lg p-4">
                            <h3 class="text-sm font-medium text-gray-300 mb-3">Whitelist Controls</h3>
                            <div class="flex flex-wrap gap-2">
                                <button onclick="executeServerCommand('whitelist on')" class="px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition text-sm flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                    </svg>
                                    Enable Whitelist
                                </button>
                                <button onclick="executeServerCommand('whitelist off')" class="px-3 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition text-sm flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                    Disable Whitelist
                                </button>
                                <button onclick="executeServerCommand('whitelist reload')" class="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition text-sm flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                    </svg>
                                    Reload Whitelist
                                </button>
                            </div>
                        </div>
                    </div>

                    <div>
                        <div class="flex justify-between items-center mb-3">
                            <h3 class="text-sm font-medium text-gray-300 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                </svg>
                                Whitelisted Players (<span id="whitelist-count">0</span>)
                            </h3>
                            <span id="whitelist-status" class="text-xs bg-blue-600/20 text-blue-400 px-2 py-1 rounded-full">Status: Unknown</span>
                        </div>
                        <div id="whitelist-players" class="bg-black/20 rounded-lg p-3 h-96 overflow-y-auto">
                            <p class="text-sm text-gray-400 text-center mt-16">Loading whitelist...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Bans Tab -->
            <div class="tab-content" id="bans-tab">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-300 mb-2">Ban Management</label>
                            <div class="flex gap-2">
                                <input type="text" id="ban-name" class="flex-1 px-4 py-2 bg-white/5 border border-white/10 rounded-lg text-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Enter player name">
                                <button onclick="banPlayer()" class="px-3 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636" />
                                    </svg>
                                    Ban
                                </button>
                                <button onclick="pardonPlayer()" class="px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    Pardon
                                </button>
                            </div>
                        </div>

                        <div class="bg-black/20 rounded-lg p-4">
                            <h3 class="text-sm font-medium text-gray-300 mb-3">Ban Details</h3>
                            <div class="space-y-2">
                                <div>
                                    <label class="block text-xs font-medium text-gray-400 mb-1">Ban Reason</label>
                                    <input type="text" id="ban-details-reason" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Optional ban reason">
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-400 mb-1">Ban Duration</label>
                                    <select id="ban-duration" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                        <option value="permanent">Permanent</option>
                                        <option value="1h">1 Hour</option>
                                        <option value="6h">6 Hours</option>
                                        <option value="1d">1 Day</option>
                                        <option value="7d">7 Days</option>
                                        <option value="30d">30 Days</option>
                                        <option value="custom">Custom</option>
                                    </select>
                                </div>
                                <div id="custom-ban-duration-container" class="hidden">
                                    <label class="block text-xs font-medium text-gray-400 mb-1">Custom Duration</label>
                                    <div class="flex gap-2">
                                        <input type="number" id="custom-ban-duration" class="flex-1 px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Duration">
                                        <select id="custom-ban-unit" class="px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                            <option value="s">Seconds</option>
                                            <option value="m">Minutes</option>
                                            <option value="h">Hours</option>
                                            <option value="d">Days</option>
                                            <option value="w">Weeks</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div>
                        <div class="flex justify-between items-center mb-3">
                            <h3 class="text-sm font-medium text-gray-300 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636" />
                                </svg>
                                Banned Players (<span id="bans-count">0</span>)
                            </h3>
                            <button onclick="refreshBansList()" class="px-2 py-1 bg-gray-600 hover:bg-gray-500 text-white rounded text-xs flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                </svg>
                                Refresh
                            </button>
                        </div>
                        <div id="bans-list" class="bg-black/20 rounded-lg p-3 h-96 overflow-y-auto">
                            <p class="text-sm text-gray-400 text-center mt-16">Loading ban list...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- OPs Tab -->
            <div class="tab-content" id="ops-tab">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-300 mb-2">OP Management</label>
                            <div class="flex gap-2">
                                <input type="text" id="op-name" class="flex-1 px-4 py-2 bg-white/5 border border-white/10 rounded-lg text-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Enter player name">
                                <button onclick="opPlayer()" class="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                                    </svg>
                                    OP
                                </button>
                                <button onclick="deopPlayer()" class="px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                                    </svg>
                                    De-OP
                                </button>
                            </div>
                        </div>

                        <div class="bg-black/20 rounded-lg p-4">
                            <h3 class="text-sm font-medium text-gray-300 mb-3">OP Level</h3>
                            <div class="space-y-2">
                                <div>
                                    <label class="block text-xs font-medium text-gray-400 mb-1">OP Level (0-4)</label>
                                    <select id="op-level" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                        <option value="0">0 - Basic commands</option>
                                        <option value="1">1 - Moderate commands</option>
                                        <option value="2">2 - Server management</option>
                                        <option value="3">3 - Console commands</option>
                                        <option value="4">4 - All commands</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-400 mb-1">Bypass Player Limit</label>
                                    <div class="flex items-center">
                                        <input type="checkbox" id="op-bypass-limit" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500">
                                        <span class="text-xs text-gray-300">Allow this OP to bypass player limit</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div>
                        <div class="flex justify-between items-center mb-3">
                            <h3 class="text-sm font-medium text-gray-300 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                                </svg>
                                OP Players (<span id="ops-count">0</span>)
                            </h3>
                            <button onclick="refreshOpsList()" class="px-2 py-1 bg-gray-600 hover:bg-gray-500 text-white rounded text-xs flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                </svg>
                                Refresh
                            </button>
                        </div>
                        <div id="ops-list" class="bg-black/20 rounded-lg p-3 h-96 overflow-y-auto">
                            <p class="text-sm text-gray-400 text-center mt-16">Loading OP list...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Advanced Actions Tab -->
            <div class="tab-content" id="actions-tab">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <div class="bg-black/20 rounded-lg p-4">
                            <h3 class="text-sm font-medium text-gray-300 mb-3">Player Teleportation</h3>
                            <div class="space-y-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-400 mb-1">Teleport Player</label>
                                    <div class="flex gap-2">
                                        <input type="text" id="teleport-player-from" class="flex-1 px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Player to move">
                                        <span class="flex items-center text-gray-400">to</span>
                                        <input type="text" id="teleport-player-to" class="flex-1 px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Player/location">
                                    </div>
                                </div>
                                <div class="teleport-options">
                                    <button onclick="teleportPlayerToPlayer()" class="px-2 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition text-sm">
                                        To Player
                                    </button>
                                    <button onclick="teleportPlayerToLocation()" class="px-2 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition text-sm">
                                        To Location
                                    </button>
                                    <button onclick="teleportAllToPlayer()" class="px-2 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition text-sm">
                                        All to Player
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="bg-black/20 rounded-lg p-4 mt-4">
                            <h3 class="text-sm font-medium text-gray-300 mb-3">Player Effects</h3>
                            <div class="space-y-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-400 mb-1">Target Player</label>
                                    <input type="text" id="effect-player" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Player name">
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-400 mb-1">Effect</label>
                                    <select id="effect-type" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-black text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                        <option value="speed">Speed</option>
                                        <option value="slowness">Slowness</option>
                                        <option value="haste">Haste</option>
                                        <option value="mining_fatigue">Mining Fatigue</option>
                                        <option value="strength">Strength</option>
                                        <option value="instant_health">Instant Health</option>
                                        <option value="instant_damage">Instant Damage</option>
                                        <option value="jump_boost">Jump Boost</option>
                                        <option value="nausea">Nausea</option>
                                        <option value="regeneration">Regeneration</option>
                                        <option value="resistance">Resistance</option>
                                        <option value="fire_resistance">Fire Resistance</option>
                                        <option value="water_breathing">Water Breathing</option>
                                        <option value="invisibility">Invisibility</option>
                                        <option value="blindness">Blindness</option>
                                        <option value="night_vision">Night Vision</option>
                                        <option value="hunger">Hunger</option>
                                        <option value="weakness">Weakness</option>
                                        <option value="poison">Poison</option>
                                        <option value="wither">Wither</option>
                                        <option value="health_boost">Health Boost</option>
                                        <option value="absorption">Absorption</option>
                                        <option value="saturation">Saturation</option>
                                        <option value="glowing">Glowing</option>
                                        <option value="levitation">Levitation</option>
                                        <option value="luck">Luck</option>
                                        <option value="unluck">Bad Luck</option>
                                        <option value="slow_falling">Slow Falling</option>
                                        <option value="conduit_power">Conduit Power</option>
                                        <option value="dolphins_grace">Dolphin's Grace</option>
                                        <option value="bad_omen">Bad Omen</option>
                                        <option value="hero_of_the_village">Hero of the Village</option>
                                    </select>
                                </div>
                                <div class="grid grid-cols-2 gap-2">
                                    <div>
                                        <label class="block text-xs font-medium text-gray-400 mb-1">Duration (seconds)</label>
                                        <input type="number" id="effect-duration" value="30" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-400 mb-1">Amplifier (0-255)</label>
                                        <input type="number" id="effect-amplifier" value="0" min="0" max="255" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                    </div>
                                </div>
                                <div class="effect-options">
                                    <button onclick="givePlayerEffect()" class="px-2 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition text-sm">
                                        Give
                                    </button>
                                    <button onclick="clearPlayerEffect()" class="px-2 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition text-sm">
                                        Clear
                                    </button>
                                    <button onclick="clearAllPlayerEffects()" class="px-2 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition text-sm">
                                        Clear All
                                    </button>
                                    <button onclick="giveAllPlayersEffect()" class="px-2 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition text-sm">
                                        Give All
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div>
                        <div class="bg-black/20 rounded-lg p-4">
                            <h3 class="text-sm font-medium text-gray-300 mb-3">Player Gamemode</h3>
                            <div class="space-y-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-400 mb-1">Target Player</label>
                                    <input type="text" id="gamemode-player" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Player name">
                                </div>
                                <div class="gamemode-selector">
                                    <button onclick="setPlayerGamemode('survival')" class="px-2 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition text-sm">
                                        Survival
                                    </button>
                                    <button onclick="setPlayerGamemode('creative')" class="px-2 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded-lg transition text-sm">
                                        Creative
                                    </button>
                                    <button onclick="setPlayerGamemode('adventure')" class="px-2 py-2 bg-green-600 hover:bg-green-500 text-white rounded-lg transition text-sm">
                                        Adventure
                                    </button>
                                    <button onclick="setPlayerGamemode('spectator')" class="px-2 py-2 bg-purple-600 hover:bg-purple-500 text-white rounded-lg transition text-sm">
                                        Spectator
                                    </button>
                                </div>
                                <div class="grid grid-cols-2 gap-2 mt-2">
                                    <button onclick="setAllPlayersGamemode('survival')" class="px-2 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition text-sm">
                                        All Survival
                                    </button>
                                    <button onclick="setAllPlayersGamemode('creative')" class="px-2 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded-lg transition text-sm">
                                        All Creative
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="bg-black/20 rounded-lg p-4 mt-4">
                            <h3 class="text-sm font-medium text-gray-300 mb-3">Player Inventory</h3>
                            <div class="space-y-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-400 mb-1">Target Player</label>
                                    <input type="text" id="inventory-player" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Player name">
                                </div>
                                <div class="flex gap-2">
                                    <button onclick="viewPlayerInventory()" class="px-2 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition text-sm flex-1">
                                        View Inventory
                                    </button>
                                    <button onclick="clearPlayerInventory()" class="px-2 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition text-sm flex-1">
                                        Clear Inventory
                                    </button>
                                </div>
                                <div id="inventory-viewer-container" class="hidden">
                                    <h4 class="text-xs font-medium text-gray-400 mb-1">Inventory Contents</h4>
                                    <div class="inventory-viewer" id="inventory-viewer">
                                        <!-- Inventory slots will be populated here -->
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="bg-black/20 rounded-lg p-4 mt-4">
                            <h3 class="text-sm font-medium text-gray-300 mb-3">Player Communication</h3>
                            <div class="space-y-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-400 mb-1">Message</label>
                                    <div class="flex">
                                        <input type="text" id="player-message" class="flex-1 px-3 py-2 bg-white/5 border border-white/10 rounded-l-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Message to send">
                                        <button onclick="sendPlayerMessage()" class="px-3 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-r-lg transition text-sm">
                                            Send
                                        </button>
                                    </div>
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-400 mb-1">Target</label>
                                    <select id="message-target" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-black text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                        <option value="all">All Players</option>
                                        <option value="selected">Selected Player</option>
                                        <option value="ops">OPs Only</option>
                                    </select>
                                </div>
                                <div class="flex gap-2">
                                    <button onclick="sendPlayerTitle()" class="px-2 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition text-sm flex-1">
                                        Send Title
                                    </button>
                                    <button onclick="sendPlayerActionBar()" class="px-2 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition text-sm flex-1">
                                        Send Action Bar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Console and Status Section -->
    <div class="flex flex-col lg:flex-row gap-6 mb-6">
        <!-- Console -->
        <div class="w-full lg:w-2/3">
            <div id="terminal-container" class="shadow-lg">
                <div id="terminal-header">
                    <span>Server Console</span>
                    <span class="text-xs">Interactive terminal</span>
                </div>
                <div id="terminal" class="h-96"></div>
                <div class="flex">
                    <input id="input" type="text" autocomplete="off" placeholder="<%= req.translations.SendACommand %>"
                        class="flex-1 px-4 py-3 text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent placeholder:font-medium placeholder:text-neutral-500">
                    <button id="emoji-picker-button" class="px-3 bg-white/5 text-gray-400 hover:text-white">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </button>
                    <div id="emoji-picker-container" class="emoji-picker-container">
                        <emoji-picker></emoji-picker>
                    </div>
                </div>
            </div>
        </div>

        <!-- Status and Server Stats -->
        <div class="w-full lg:w-1/3 space-y-6">
            <!-- Status Card -->
            <div class="bg-white/5 rounded-xl px-4 py-5 shadow sm:p-6 h-48 relative overflow-hidden status-box">
                <canvas id="statusChart"></canvas>
                <div class="relative z-10 h-full flex flex-col">
                    <div>
                        <h2 class="text-sm font-medium text-neutral-400"><%= req.translations.status %></h2>
                        <p id="status" class="mt-1 text-2xl font-medium tracking-tight text-white">-</p>
                        <p id="statusDetails" class="text-sm text-neutral-400 mt-2">Checking server status...</p>
                    </div>

                    <!-- Controls moved to status box -->
                    <div class="status-controls">
                        <button id="startButton" type="button" title="Start Server"
                            class="bg-emerald-600 hover:bg-emerald-500 text-white">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5">
                                <path fill-rule="evenodd" d="M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z" clip-rule="evenodd" />
                            </svg>
                        </button>
                        <button id="restartButton" type="button" title="Restart Server"
                            class="bg-white/20 hover:bg-white/30 text-white">
                            <svg xmlns="http://www3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5">
                                <path fill-rule="evenodd" d="M4.755 10.059a7.5 7.5 0 0 1 12.548-3.364l1.903 1.903h-3.183a.75.75 0 1 0 0 1.5h4.992a.75.75 0 0 0 .75-.75V4.356a.75.75 0 0 0-1.5 0v3.18l-1.9-1.9A9 9 0 0 0 3.306 9.67a.75.75 0 1 0 1.45.388Zm15.408 3.352a.75.75 0 0 0-.919.53 7.5 7.5 0 0 1-12.548 3.364l-1.902-1.903h3.183a.75.75 0 0 0 0-1.5H2.984a.75.75 0 0 0-.75.75v4.992a.75.75 0 0 0 1.5 0v-3.18l1.9 1.9a9 9 0 0 0 15.059-4.035.75.75 0 0 0-.53-.918Z" clip-rule="evenodd" />
                            </svg>
                        </button>
                        <button id="stopButton" type="button" title="Stop Server"
                            class="bg-red-600 hover:bg-red-500 text-white">
                            <svg xmlns="http://www3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5">
                                <path fill-rule="evenodd" d="M4.5 7.5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-9a3 3 0 0 1-3-3v-9Z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Server Stats -->
            <div class="bg-white/5 rounded-xl p-6">
                <h2 class="text-lg font-semibold text-white mb-4 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                    Server Statistics
                </h2>

                <div class="space-y-4">
                    <!-- Enhanced Uptime Section -->
                    <div>
                        <div class="flex justify-between items-center text-sm text-gray-400 mb-1">
                            <span class="flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z" />
                                </svg>
                                Uptime
                            </span>
                            <div class="flex items-center">
                                <span id="uptime-days" class="uptime-badge bg-blue-600/10 text-blue-400 px-1.5 py-0.5 rounded text-xs mr-1">0d</span>
                                <span id="uptime-hours" class="uptime-badge bg-blue-600/10 text-blue-400 px-1.5 py-0.5 rounded text-xs mr-1">0h</span>
                                <span id="uptime-minutes" class="uptime-badge bg-blue-600/10 text-blue-400 px-1.5 py-0.5 rounded text-xs mr-1">0m</span>
                                <span id="uptime-seconds" class="uptime-badge bg-blue-600/10 text-blue-400 px-1.5 py-0.5 rounded text-xs">0s</span>
                            </div>
                        </div>
                        <div class="w-full bg-gray-700 rounded-full h-1.5">
                            <div id="uptime-bar" class="bg-blue-500 h-1.5 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                        <div class="flex justify-between text-xs text-gray-500 mt-1">
                            <span>Last started: <span id="last-started">-</span></span>
                            <span id="uptime-percent">0% uptime</span>
                        </div>
                    </div>

                    <!-- TPS Section -->
                    <div>
                        <div class="flex justify-between text-sm text-gray-400 mb-1">
                            <span>TPS (ticks per second)</span>
                            <span id="tps">-</span>
                        </div>
                        <div class="w-full bg-gray-700 rounded-full h-1.5">
                            <div id="tps-bar" class="bg-green-500 h-1.5 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                        <div class="flex justify-between text-xs text-gray-500 mt-1">
                            <span>Performance</span>
                            <span id="tps-status">-</span>
                        </div>
                    </div>

                    <!-- CPU Section -->
                    <div>
                        <div class="flex justify-between text-sm text-gray-400 mb-1">
                            <span>CPU Usage</span>
                            <span id="cpuUsage">-</span>
                        </div>
                        <div class="w-full bg-gray-700 rounded-full h-1.5">
                            <div id="cpu-bar" class="bg-yellow-500 h-1.5 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                        <div class="flex justify-between text-xs text-gray-500 mt-1">
                            <span>Cores: <span id="cpu-cores">-</span></span>
                            <span id="cpu-status">-</span>
                        </div>
                    </div>

                    <!-- Memory Section -->
                    <div>
                        <div class="flex justify-between text-sm text-gray-400 mb-1">
                            <span>Memory Usage</span>
                            <span id="memoryUsage">-</span>
                        </div>
                        <div class="w-full bg-gray-700 rounded-full h-1.5">
                            <div id="memory-bar" class="bg-purple-500 h-1.5 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                        <div class="flex justify-between text-xs text-gray-500 mt-1">
                            <span>Limit: <span id="memory-limit">-</span></span>
                            <span id="memory-status">-</span>
                        </div>
                    </div>

                    <!-- Command History -->
                    <div class="pt-4 border-t border-white/10">
                        <h3 class="text-sm font-medium text-gray-300 mb-2">Recent Commands</h3>
                        <div id="command-history" class="text-sm text-gray-400 space-y-1 max-h-32 overflow-y-auto">
                            <p class="text-center py-4">No commands executed yet</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<!-- Add this to your tab-container div -->
<div class="tab" data-tab="worlds">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
    World Management
</div>

<!-- World Management Tab -->
<div class="tab-content" id="worlds-tab">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- World Creation Panel -->
        <div class="lg:col-span-1">
            <div class="bg-white/5 rounded-xl p-6 shadow">
                <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    Create/Import World
                </h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">World Name</label>
                        <input type="text" id="world-name" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="my_custom_world">
                        <p id="world-name-error" class="text-xs text-red-400 mt-1 hidden">World name cannot be empty or contain special characters</p>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-3">
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">Environment</label>
                            <select id="world-environment" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                <option value="NORMAL">Normal (Overworld)</option>
                                <option value="NETHER">Nether</option>
                                <option value="THE_END">The End</option>
                                <option value="CUSTOM">Custom</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">World Type</label>
                            <select id="world-type" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                <option value="NORMAL">Normal</option>
                                <option value="FLAT">Flat</option>
                                <option value="LARGE_BIOMES">Large Biomes</option>
                                <option value="AMPLIFIED">Amplified</option>
                                <option value="VOID">Void</option>
                            </select>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">Generator (Optional)</label>
                        <input type="text" id="world-generator" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Plugin:Generator">
                        <p class="text-xs text-gray-400 mt-1">Format: PluginName:GeneratorName</p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">Seed (Optional)</label>
                        <input type="text" id="world-seed" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Leave blank for random">
                    </div>
                    
                    <div class="pt-2">
                        <button onclick="createWorld()" class="w-full px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            Create World
                        </button>
                    </div>
                    
                    <div class="relative flex items-center py-2">
                        <div class="flex-grow border-t border-white/10"></div>
                        <span class="flex-shrink mx-2 text-xs text-gray-400">OR</span>
                        <div class="flex-grow border-t border-white/10"></div>
                    </div>
                    
                    <div class="space-y-3">
                        <button onclick="showImportModal()" class="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                            </svg>
                            Import World
                        </button>
                        <button onclick="showCloneModal()" class="w-full px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                            Clone World
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- World Quick Actions -->
            <div class="bg-white/5 rounded-xl p-6 shadow mt-6">
                <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                    Quick Actions
                </h3>
                
                <div class="grid grid-cols-2 gap-3">
                    <button onclick="teleportToSelectedWorld()" class="px-3 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition flex items-center justify-center text-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        Teleport To
                    </button>
                    <button onclick="showTeleportAllModal()" class="px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition flex items-center justify-center text-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                        </svg>
                        Teleport All
                    </button>
                    <button onclick="loadSelectedWorld()" class="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition flex items-center justify-center text-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                        </svg>
                        Load World
                    </button>
                    <button onclick="unloadSelectedWorld()" class="px-3 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition flex items-center justify-center text-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                        </svg>
                        Unload World
                    </button>
                    <button onclick="showBackupModal()" class="px-3 py-2 bg-teal-600 hover:bg-teal-700 text-white rounded-lg transition flex items-center justify-center text-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01" />
                        </svg>
                        Backup World
                    </button>
                    <button onclick="showDeleteWorldModal()" class="px-3 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition flex items-center justify-center text-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Delete World
                    </button>
                </div>
            </div>
            
            <!-- Selected World Info -->
            <div id="world-info-panel" class="hidden bg-white/5 rounded-xl p-6 shadow mt-6">
                <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    World Info
                </h3>
                
                <div class="space-y-3">
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-300">Name:</span>
                        <span id="info-world-name" class="text-sm text-white"></span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-300">Environment:</span>
                        <span id="info-world-env" class="text-sm text-white"></span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-300">Status:</span>
                        <span id="info-world-status" class="text-sm text-white"></span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-300">Players:</span>
                        <span id="info-world-players" class="text-sm text-white"></span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-300">Created:</span>
                        <span id="info-world-created" class="text-sm text-white"></span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-300">Size:</span>
                        <span id="info-world-size" class="text-sm text-white"></span>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- World List Panel -->
        <div class="lg:col-span-2">
            <div class="bg-white/5 rounded-xl p-6 shadow h-full">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-white flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                        World List (<span id="worlds-count">0</span>)
                    </h3>
                    <div class="flex items-center space-x-2">
                        <div class="relative">
                            <input type="text" id="world-search" class="pl-8 pr-4 py-1.5 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Search worlds...">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400 absolute left-2.5 top-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                        </div>
                        <select id="world-filter" class="px-3 py-1.5 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                            <option value="all">All Worlds</option>
                            <option value="loaded">Loaded Only</option>
                            <option value="unloaded">Unloaded Only</option>
                            <option value="normal">Normal</option>
                            <option value="nether">Nether</option>
                            <option value="end">The End</option>
                        </select>
                        <select id="world-sort" class="px-3 py-1.5 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                            <option value="name-asc">Sort: A-Z</option>
                            <option value="name-desc">Sort: Z-A</option>
                            <option value="players-asc">Sort: Players ↑</option>
                            <option value="players-desc">Sort: Players ↓</option>
                        </select>
                    </div>
                </div>
                
                <div class="overflow-hidden rounded-lg border border-white/10">
                    <table class="min-w-full divide-y divide-white/10">
                        <thead class="bg-white/5">
                            <tr>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">World Name</th>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Environment</th>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Players</th>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="worlds-list" class="bg-white/5 divide-y divide-white/10">
                            <tr>
                                <td colspan="5" class="px-4 py-8 text-center text-sm text-gray-400" id="worlds-loading">
                                    <div class="flex items-center justify-center space-x-2">
                                        <svg class="animate-spin h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                        <span>Loading world data...</span>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <div class="mt-4 flex items-center justify-between">
                    <div class="flex items-center space-x-4">
                        <div class="text-sm text-gray-400">
                            Showing <span id="worlds-showing">0</span> of <span id="worlds-total">0</span> worlds
                        </div>
                        <div class="flex items-center space-x-2">
                            <span class="text-xs text-gray-400">Rows per page:</span>
                            <select id="worlds-per-page" class="px-2 py-1 bg-white/5 border border-white/10 rounded text-white text-xs focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                <option value="5">5</option>
                                <option value="10" selected>10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                            </select>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <button id="worlds-prev" class="px-3 py-1 bg-white/5 border border-white/10 rounded text-sm text-gray-300 hover:bg-white/10 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                            Previous
                        </button>
                        <button id="worlds-next" class="px-3 py-1 bg-white/5 border border-white/10 rounded text-sm text-gray-300 hover:bg-white/10 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                            Next
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- World Settings Panel (shown when a world is selected) -->
    <div id="world-settings-panel" class="hidden mt-6 bg-white/5 rounded-xl p-6 shadow">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-white flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                World Settings: <span id="selected-world-name" class="ml-1 font-normal text-indigo-400"></span>
            </h3>
            <div class="flex space-x-2">
                <button onclick="resetWorldSettings()" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition text-sm">
                    Reset
                </button>
                <button onclick="saveWorldSettings()" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition text-sm">
                    Save Settings
                </button>
            </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <h4 class="text-sm font-medium text-gray-300 mb-3 border-b border-white/10 pb-2">Game Rules</h4>
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div class="flex items-center">
                        <input type="checkbox" id="world-pvp" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500">
                        <label class="text-sm text-gray-300">Allow PvP</label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" id="world-animals" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500">
                        <label class="text-sm text-gray-300">Spawn Animals</label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" id="world-monsters" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500">
                        <label class="text-sm text-gray-300">Spawn Monsters</label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" id="world-weather" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500">
                        <label class="text-sm text-gray-300">Weather Cycle</label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" id="world-structures" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500">
                        <label class="text-sm text-gray-300">Generate Structures</label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" id="world-autoheal" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500">
                        <label class="text-sm text-gray-300">Auto-Heal</label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" id="world-keep-inventory" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500">
                        <label class="text-sm text-gray-300">Keep Inventory</label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" id="world-fire-spread" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500">
                        <label class="text-sm text-gray-300">Fire Spread</label>
                    </div>
                </div>
                
                <h4 class="text-sm font-medium text-gray-300 mb-3 mt-6 border-b border-white/10 pb-2">Difficulty</h4>
                <div class="grid grid-cols-4 gap-2">
                    <button onclick="setWorldDifficulty('PEACEFUL')" class="px-3 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition text-sm">
                        Peaceful
                    </button>
                    <button onclick="setWorldDifficulty('EASY')" class="px-3 py-2 bg-green-700 hover:bg-green-600 text-white rounded-lg transition text-sm">
                        Easy
                    </button>
                    <button onclick="setWorldDifficulty('NORMAL')" class="px-3 py-2 bg-blue-700 hover:bg-blue-600 text-white rounded-lg transition text-sm">
                        Normal
                    </button>
                    <button onclick="setWorldDifficulty('HARD')" class="px-3 py-2 bg-red-700 hover:bg-red-600 text-white rounded-lg transition text-sm">
                        Hard
                    </button>
                </div>
                
                <h4 class="text-sm font-medium text-gray-300 mb-3 mt-6 border-b border-white/10 pb-2">Time Control</h4>
                <div class="grid grid-cols-3 gap-2">
                    <button onclick="setWorldTime('day')" class="px-3 py-2 bg-yellow-700 hover:bg-yellow-600 text-white rounded-lg transition text-sm">
                        Set Day
                    </button>
                    <button onclick="setWorldTime('night')" class="px-3 py-2 bg-indigo-700 hover:bg-indigo-600 text-white rounded-lg transition text-sm">
                        Set Night
                    </button>
                    <button onclick="toggleWorldTime()" class="px-3 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition text-sm">
                        Toggle Cycle
                    </button>
                </div>
            </div>
            
            <div>
                <h4 class="text-sm font-medium text-gray-300 mb-3 border-b border-white/10 pb-2">Advanced Settings</h4>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">Spawn Limits</label>
                        <div class="grid grid-cols-2 gap-3">
                            <div>
                                <label class="block text-xs text-gray-400 mb-1">Animals</label>
                                <input type="number" id="world-animals-limit" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" min="0" max="100">
                            </div>
                            <div>
                                <label class="block text-xs text-gray-400 mb-1">Monsters</label>
                                <input type="number" id="world-monsters-limit" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" min="0" max="100">
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">Game Mode</label>
                        <div class="grid grid-cols-2 gap-3">
                            <div>
                                <label class="block text-xs text-gray-400 mb-1">Default</label>
                                <select id="world-gamemode" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                    <option value="SURVIVAL">Survival</option>
                                    <option value="CREATIVE">Creative</option>
                                    <option value="ADVENTURE">Adventure</option>
                                    <option value="SPECTATOR">Spectator</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-xs text-gray-400 mb-1">Override</label>
                                <select id="world-gamemode-override" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                                    <option value="NONE">None</option>
                                    <option value="SURVIVAL">Survival</option>
                                    <option value="CREATIVE">Creative</option>
                                    <option value="ADVENTURE">Adventure</option>
                                    <option value="SPECTATOR">Spectator</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">World Border</label>
                        <div class="grid grid-cols-2 gap-3">
                            <div>
                                <label class="block text-xs text-gray-400 mb-1">Size (blocks)</label>
                                <input type="number" id="world-border-size" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" min="1" max="30000000">
                            </div>
                            <div>
                                <label class="block text-xs text-gray-400 mb-1">Damage</label>
                                <input type="number" id="world-border-damage" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" min="0" max="100" step="0.1">
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-1">Spawn Location</label>
                        <div class="grid grid-cols-3 gap-3">
                            <div class="col-span-1">
                                <label class="block text-xs text-gray-400 mb-1">X</label>
                                <input type="number" id="world-spawn-x" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                            </div>
                            <div class="col-span-1">
                                <label class="block text-xs text-gray-400 mb-1">Y</label>
                                <input type="number" id="world-spawn-y" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                            </div>
                            <div class="col-span-1">
                                <label class="block text-xs text-gray-400 mb-1">Z</label>
                                <input type="number" id="world-spawn-z" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                            </div>
                        </div>
                        <div class="mt-2">
                            <button onclick="getCurrentSpawnLocation()" class="px-3 py-1.5 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition text-xs">
                                Get Current Location
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Import World Modal -->
<div id="importWorldModal" class="modal-overlay">
    <div class="bg-gray-800 rounded-lg p-6 w-full max-w-md">
        <div class="flex justify-between items-start mb-4">
            <h3 class="text-lg font-medium text-white">Import World</h3>
            <button onclick="hideModal('importWorldModal')" class="text-gray-400 hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        
        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">World Name</label>
                <input type="text" id="import-world-name" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="my_imported_world">
                <p id="import-name-error" class="text-xs text-red-400 mt-1 hidden">World name cannot be empty</p>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">World Folder</label>
                <input type="text" id="import-world-folder" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="world_folder_name">
                <p id="import-folder-error" class="text-xs text-red-400 mt-1 hidden">Folder name cannot be empty</p>
                <p class="text-xs text-gray-400 mt-1">Must be in the server's root directory</p>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">Environment</label>
                <select id="import-world-environment" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-black text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                    <option value="NORMAL">Normal (Overworld)</option>
                    <option value="NETHER">Nether</option>
                    <option value="THE_END">The End</option>
                </select>
            </div>
            
            <div class="flex items-center">
                <input type="checkbox" id="import-world-overwrite" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500">
                <label class="text-sm text-gray-300">Overwrite if exists</label>
            </div>
            
            <div class="pt-4 flex justify-end space-x-3">
                <button onclick="hideModal('importWorldModal')" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition">
                    Cancel
                </button>
                <button onclick="importWorld()" class="px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded-lg transition">
                    Import
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Clone World Modal -->
<div id="cloneWorldModal" class="modal-overlay">
    <div class="bg-gray-800 rounded-lg p-6 w-full max-w-md">
        <div class="flex justify-between items-start mb-4">
            <h3 class="text-lg font-medium text-white">Clone World</h3>
            <button onclick="hideModal('cloneWorldModal')" class="text-gray-400 hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        
        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">Source World</label>
                <select id="clone-source-world" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                    <option value="">Select a world</option>
                </select>
                <p id="clone-source-error" class="text-xs text-red-400 mt-1 hidden">Please select a source world</p>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">New World Name</label>
                <input type="text" id="clone-new-name" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="new_world_name">
                <p id="clone-name-error" class="text-xs text-red-400 mt-1 hidden">World name cannot be empty</p>
            </div>
            
            <div class="flex items-center">
                <input type="checkbox" id="clone-copy-data" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500" checked>
                <label class="text-sm text-gray-300">Copy world data</label>
            </div>
            
            <div class="pt-4 flex justify-end space-x-3">
                <button onclick="hideModal('cloneWorldModal')" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition">
                    Cancel
                </button>
                <button onclick="cloneWorld()" class="px-4 py-2 bg-purple-600 hover:bg-purple-500 text-white rounded-lg transition">
                    Clone
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Backup World Modal -->
<div id="backupWorldModal" class="modal-overlay">
    <div class="bg-gray-800 rounded-lg p-6 w-full max-w-md">
        <div class="flex justify-between items-start mb-4">
            <h3 class="text-lg font-medium text-white">Backup World</h3>
            <button onclick="hideModal('backupWorldModal')" class="text-gray-400 hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        
        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">World to Backup</label>
                <select id="backup-world" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                    <option value="">Select a world</option>
                </select>
                <p id="backup-world-error" class="text-xs text-red-400 mt-1 hidden">Please select a world</p>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">Backup Name</label>
                <input type="text" id="backup-name" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="backup_2023">
                <p id="backup-name-error" class="text-xs text-red-400 mt-1 hidden">Backup name cannot be empty</p>
            </div>
            
            <div class="flex items-center">
                <input type="checkbox" id="backup-compress" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500" checked>
                <label class="text-sm text-gray-300">Compress backup</label>
            </div>
            
            <div class="pt-4 flex justify-end space-x-3">
                <button onclick="hideModal('backupWorldModal')" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition">
                    Cancel
                </button>
                <button onclick="createBackup()" class="px-4 py-2 bg-teal-600 hover:bg-teal-500 text-white rounded-lg transition">
                    Create Backup
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Teleport All Modal -->
<div id="teleportAllModal" class="modal-overlay">
    <div class="bg-gray-800 rounded-lg p-6 w-full max-w-md">
        <div class="flex justify-between items-start mb-4">
            <h3 class="text-lg font-medium text-white">Teleport All Players</h3>
            <button onclick="hideModal('teleportAllModal')" class="text-gray-400 hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        
        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">Target World</label>
                <select id="teleport-all-world" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                    <option value="">Select a world</option>
                </select>
                <p id="teleport-world-error" class="text-xs text-red-400 mt-1 hidden">Please select a destination world</p>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-1">Filter Players</label>
                <select id="teleport-all-filter" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" onchange="updateTeleportFilterFields()">
                    <option value="all">All Players</option>
                    <option value="current">Current World Only</option>
                    <option value="group">Specific Group</option>
                    <option value="permission">With Permission</option>
                </select>
            </div>
            
            <div id="teleport-all-extra-fields" class="hidden">
                <!-- Additional fields will appear here based on filter selection -->
            </div>
            
            <div class="pt-4 flex justify-end space-x-3">
                <button onclick="hideModal('teleportAllModal')" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition">
                    Cancel
                </button>
                <button onclick="teleportAllPlayers()" class="px-4 py-2 bg-purple-600 hover:bg-purple-500 text-white rounded-lg transition">
                    Teleport
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete World Confirmation Modal -->
<div id="deleteWorldModal" class="modal-overlay">
    <div class="bg-gray-800 rounded-lg p-6 w-full max-w-md">
        <div class="flex justify-between items-start mb-4">
            <h3 class="text-lg font-medium text-white">Confirm World Deletion</h3>
            <button onclick="hideModal('deleteWorldModal')" class="text-gray-400 hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        
        <div class="space-y-4">
            <p id="delete-world-message" class="text-gray-300">Are you sure you want to delete this world?</p>
            
            <div class="flex items-center">
                <input type="checkbox" id="delete-world-backup" class="mr-2 rounded bg-white/5 border-white/10 text-indigo-600 focus:ring-indigo-500">
                <label class="text-sm text-gray-300">Create backup before deleting</label>
            </div>
            
            <div class="pt-4 flex justify-end space-x-3">
                <button onclick="hideModal('deleteWorldModal')" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition">
                    Cancel
                </button>
                <button onclick="confirmDeleteWorld()" class="px-4 py-2 bg-red-600 hover:bg-red-500 text-white rounded-lg transition">
                    Delete World
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// World Management State
let worldsData = [];
let currentSelectedWorld = null;
let currentPage = 1;
let worldsPerPage = 10;
let worldsRefreshInterval = null;
let isWorldsTabInitialized = false;
let sortOrder = 'name-asc';

// Initialize world management
function initWorldManagement() {
    if (isWorldsTabInitialized) return;
    isWorldsTabInitialized = true;
    
    // Load initial world list
    reloadWorlds();
    
    // Set up auto-refresh every 30 seconds
    worldsRefreshInterval = setInterval(reloadWorlds, 30000);
    
    // Set up event listeners
    setupWorldsEventListeners();
}

function setupWorldsEventListeners() {
    // Pagination
    document.getElementById('worlds-prev')?.addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            updateWorldListDisplay();
        }
    });

    document.getElementById('worlds-next')?.addEventListener('click', () => {
        const filteredWorlds = getFilteredWorlds();
        const totalPages = Math.ceil(filteredWorlds.length / worldsPerPage);
        if (currentPage < totalPages) {
            currentPage++;
            updateWorldListDisplay();
        }
    });

    // Search and filter events with debounce
    const searchInput = document.getElementById('world-search');
    if (searchInput) {
        let searchTimeout;
        searchInput.addEventListener('input', () => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                currentPage = 1;
                updateWorldListDisplay();
            }, 300);
        });
    }

    document.getElementById('world-filter')?.addEventListener('change', () => {
        currentPage = 1;
        updateWorldListDisplay();
    });

    document.getElementById('world-sort')?.addEventListener('change', (e) => {
        sortOrder = e.target.value;
        updateWorldListDisplay();
    });

    document.getElementById('worlds-per-page')?.addEventListener('change', (e) => {
        worldsPerPage = parseInt(e.target.value);
        currentPage = 1;
        updateWorldListDisplay();
    });

    // Teleport filter fields
    document.getElementById('teleport-all-filter')?.addEventListener('change', updateTeleportFilterFields);
}

function hideModal(modalId) {
    document.getElementById(modalId)?.classList.remove('active');
}

function getFilteredWorlds() {
    const searchTerm = document.getElementById('world-search')?.value.toLowerCase() || '';
    const filter = document.getElementById('world-filter')?.value || 'all';
    
    let filtered = worldsData.filter(world => {
        // Apply search filter
        if (searchTerm && !world.name.toLowerCase().includes(searchTerm)) {
            return false;
        }
        
        // Apply type filter
        switch(filter) {
            case 'loaded': return world.loaded;
            case 'unloaded': return !world.loaded;
            case 'normal': return world.environment === 'NORMAL';
            case 'nether': return world.environment === 'NETHER';
            case 'end': return world.environment === 'THE_END';
            default: return true;
        }
    });
    
    // Apply sorting
    return sortWorlds(filtered);
}

function sortWorlds(worlds) {
    const [sortBy, order] = sortOrder.split('-');
    
    return worlds.sort((a, b) => {
        let compareA, compareB;
        
        switch(sortBy) {
            case 'name':
                compareA = a.name.toLowerCase();
                compareB = b.name.toLowerCase();
                break;
            case 'players':
                compareA = a.players;
                compareB = b.players;
                break;
            default:
                compareA = a.name.toLowerCase();
                compareB = b.name.toLowerCase();
        }
        
        if (compareA < compareB) return order === 'asc' ? -1 : 1;
        if (compareA > compareB) return order === 'asc' ? 1 : -1;
        return 0;
    });
}

// World Management Functions
function createWorld() {
    const worldName = document.getElementById('world-name')?.value.trim();
    const errorElement = document.getElementById('world-name-error');
    
    // Validate world name
    if (!worldName || !/^[a-zA-Z0-9_\-]+$/.test(worldName)) {
        errorElement.textContent = !worldName ? 'World name cannot be empty' : 'World name can only contain letters, numbers, underscores and hyphens';
        errorElement.classList.remove('hidden');
        return;
    }
    
    errorElement.classList.add('hidden');

    const environment = document.getElementById('world-environment')?.value || 'NORMAL';
    const worldType = document.getElementById('world-type')?.value || 'NORMAL';
    const generator = document.getElementById('world-generator')?.value.trim();
    const seed = document.getElementById('world-seed')?.value.trim();

    let command = `mv create ${worldName} ${environment}`;
    if (worldType !== 'NORMAL') {
        command += ` -t ${worldType}`;
    }
    if (generator) {
        command += ` -g ${generator}`;
    }
    if (seed) {
        command += ` -s ${seed}`;
    }

    executeServerCommand(command);
    setTimeout(reloadWorlds, 2000);
    
    // Clear form
    const nameInput = document.getElementById('world-name');
    const generatorInput = document.getElementById('world-generator');
    const seedInput = document.getElementById('world-seed');
    if (nameInput) nameInput.value = '';
    if (generatorInput) generatorInput.value = '';
    if (seedInput) seedInput.value = '';
    
    showAlert('info', 'Creating World', `World "${worldName}" is being created...`);
}

function showImportModal() {
    const modal = document.getElementById('importWorldModal');
    if (modal) {
        modal.classList.add('active');
        document.getElementById('import-name-error')?.classList.add('hidden');
        document.getElementById('import-folder-error')?.classList.add('hidden');
    }
}

function showCloneModal() {
    const modal = document.getElementById('cloneWorldModal');
    const select = document.getElementById('clone-source-world');
    
    if (!modal || !select) return;
    
    // Clear any previous errors
    document.getElementById('clone-source-error')?.classList.add('hidden');
    document.getElementById('clone-name-error')?.classList.add('hidden');
    
    // Populate world select
    select.innerHTML = '<option value="">Select a world</option>';
    worldsData.forEach(world => {
        const option = document.createElement('option');
        option.value = world.name;
        option.textContent = world.name;
        if (currentSelectedWorld === world.name) {
            option.selected = true;
        }
        select.appendChild(option);
    });
    
    modal.classList.add('active');
}

function showBackupModal() {
    if (!currentSelectedWorld) {
        showAlert('error', 'Error', 'Please select a world first');
        return;
    }
    
    const modal = document.getElementById('backupWorldModal');
    const select = document.getElementById('backup-world');
    
    if (!modal || !select) return;
    
    // Clear any previous errors
    document.getElementById('backup-world-error')?.classList.add('hidden');
    document.getElementById('backup-name-error')?.classList.add('hidden');
    
    // Populate world select
    select.innerHTML = '<option value="">Select a world</option>';
    worldsData.forEach(world => {
        const option = document.createElement('option');
        option.value = world.name;
        option.textContent = world.name;
        if (currentSelectedWorld === world.name) {
            option.selected = true;
        }
        select.appendChild(option);
    });
    
    // Set default backup name
    const now = new Date();
    const backupName = `backup_${currentSelectedWorld}_${now.getFullYear()}${(now.getMonth()+1).toString().padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}`;
    document.getElementById('backup-name').value = backupName;
    
    modal.classList.add('active');
}

function importWorld() {
    const worldName = document.getElementById('import-world-name')?.value.trim();
    const folder = document.getElementById('import-world-folder')?.value.trim();
    const environment = document.getElementById('import-world-environment')?.value || 'NORMAL';
    const overwrite = document.getElementById('import-world-overwrite')?.checked || false;
    
    const nameError = document.getElementById('import-name-error');
    const folderError = document.getElementById('import-folder-error');
    let hasError = false;
    
    if (!worldName) {
        nameError?.classList.remove('hidden');
        hasError = true;
    } else {
        nameError?.classList.add('hidden');
    }
    
    if (!folder) {
        folderError?.classList.remove('hidden');
        hasError = true;
    } else {
        folderError?.classList.add('hidden');
    }
    
    if (hasError) return;

    let command = `mv import ${worldName} ${folder} ${environment}`;
    if (overwrite) {
        command += ' -o';
    }

    executeServerCommand(command);
    hideModal('importWorldModal');
    setTimeout(reloadWorlds, 2000);
    
    showAlert('info', 'Importing World', `World "${worldName}" is being imported...`);
}

function cloneWorld() {
    const sourceWorld = document.getElementById('clone-source-world')?.value;
    const newName = document.getElementById('clone-new-name')?.value.trim();
    const copyData = document.getElementById('clone-copy-data')?.checked !== false;
    
    const sourceError = document.getElementById('clone-source-error');
    const nameError = document.getElementById('clone-name-error');
    let hasError = false;
    
    if (!sourceWorld) {
        sourceError?.classList.remove('hidden');
        hasError = true;
    } else {
        sourceError?.classList.add('hidden');
    }
    
    if (!newName) {
        nameError?.classList.remove('hidden');
        hasError = true;
    } else {
        nameError?.classList.add('hidden');
    }
    
    if (hasError) return;

    let command = `mv clone ${sourceWorld} ${newName}`;
    if (!copyData) {
        command += ' -n';
    }

    executeServerCommand(command);
    hideModal('cloneWorldModal');
    setTimeout(reloadWorlds, 2000);
    
    showAlert('info', 'Cloning World', `World "${sourceWorld}" is being cloned to "${newName}"...`);
}

function createBackup() {
    const world = document.getElementById('backup-world')?.value;
    const backupName = document.getElementById('backup-name')?.value.trim();
    const compress = document.getElementById('backup-compress')?.checked !== false;
    
    const worldError = document.getElementById('backup-world-error');
    const nameError = document.getElementById('backup-name-error');
    let hasError = false;
    
    if (!world) {
        worldError?.classList.remove('hidden');
        hasError = true;
    } else {
        worldError?.classList.add('hidden');
    }
    
    if (!backupName) {
        nameError?.classList.remove('hidden');
        hasError = true;
    } else {
        nameError?.classList.add('hidden');
    }
    
    if (hasError) return;

    let command = `mv backup ${world} ${backupName}`;
    if (!compress) {
        command += ' -u';
    }

    executeServerCommand(command);
    hideModal('backupWorldModal');
    
    showAlert('info', 'Creating Backup', `Backup "${backupName}" is being created for world "${world}"...`);
}

function reloadWorlds() {
    const loadingElement = document.getElementById('worlds-loading');
    if (loadingElement) {
        loadingElement.innerHTML = `
            <div class="flex items-center justify-center space-x-2">
                <svg class="animate-spin h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span>Loading world data...</span>
            </div>
        `;
    }
    
    // Use Multiverse-Core command to get world list
    executeServerCommand('mv list');
}

// Updated to properly parse Multiverse-Core world list output
function parseWorldList(message) {
    try {
        const cleanedMessage = message.replace(/\x1B\[[0-9;]*[mK]/g, '');
        const newWorldsData = [];
        
        // Check if this is a Multiverse-Core world list response
        if (cleanedMessage.includes("=== Worlds ===") || cleanedMessage.startsWith("Worlds:")) {
            const lines = cleanedMessage.split('\n');
            const worldRegex = /^([^\s-]+)\s+-\s+(.+)$/;
            
            for (const line of lines) {
                const match = line.match(worldRegex);
                if (match) {
                    const worldName = match[1].trim();
                    const details = match[2].trim();
                    
                    // Parse details from Multiverse-Core output
                    const envMatch = details.match(/Env: (\w+)/);
                    const playersMatch = details.match(/Players: (\d+)/);
                    const loadedMatch = details.match(/\[Loaded\]/);
                    const createdMatch = details.match(/Created: ([\d-]+)/);
                    const sizeMatch = details.match(/Size: ([\d.]+ \w+)/);
                    
                    newWorldsData.push({
                        name: worldName,
                        environment: envMatch ? envMatch[1] : 'NORMAL',
                        players: playersMatch ? parseInt(playersMatch[1]) : 0,
                        loaded: !!loadedMatch,
                        created: createdMatch ? createdMatch[1] : 'Unknown',
                        size: sizeMatch ? sizeMatch[1] : 'Unknown'
                    });
                }
            }
            
            // Update the UI with the world list
            if (newWorldsData.length > 0) {
                worldsData = newWorldsData;
                updateWorldListDisplay();
            } else {
                const tbody = document.getElementById('worlds-list');
                if (tbody) {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="5" class="px-4 py-8 text-center text-sm text-gray-400">
                                No worlds found on the server
                            </td>
                        </tr>
                    `;
                }
            }
        }
        return newWorldsData;
    } catch (error) {
        console.error('Error parsing world list:', error);
        showAlert('error', 'Error', 'Failed to parse world list data');
        
        const tbody = document.getElementById('worlds-list');
        if (tbody) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="px-4 py-8 text-center text-sm text-gray-400">
                        Error loading world data. Please try again.
                    </td>
                </tr>
            `;
        }
        
        return [];
    }
}

function updateWorldListDisplay() {
    try {
        const filteredWorlds = getFilteredWorlds();
        const tbody = document.getElementById('worlds-list');
        if (!tbody) return;
        
        // Update counts
        const worldsCountElement = document.getElementById('worlds-count');
        const worldsTotalElement = document.getElementById('worlds-total');
        const worldsShowingElement = document.getElementById('worlds-showing');
        
        if (worldsCountElement) worldsCountElement.textContent = filteredWorlds.length;
        if (worldsTotalElement) worldsTotalElement.textContent = filteredWorlds.length;
        
        // Pagination
        const totalPages = Math.ceil(filteredWorlds.length / worldsPerPage);
        const startIdx = (currentPage - 1) * worldsPerPage;
        const paginatedWorlds = filteredWorlds.slice(startIdx, startIdx + worldsPerPage);
        
        if (worldsShowingElement) {
            worldsShowingElement.textContent = 
                `${startIdx + 1}-${Math.min(startIdx + worldsPerPage, filteredWorlds.length)}`;
        }
        
        // Update pagination buttons
        const prevBtn = document.getElementById('worlds-prev');
        const nextBtn = document.getElementById('worlds-next');
        if (prevBtn) prevBtn.disabled = currentPage <= 1;
        if (nextBtn) nextBtn.disabled = currentPage >= totalPages || filteredWorlds.length <= worldsPerPage;
        
        // Update table
        tbody.innerHTML = '';
        
        if (paginatedWorlds.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="px-4 py-8 text-center text-sm text-gray-400">
                        No worlds found matching your criteria
                    </td>
                </tr>
            `;
            return;
        }
        
        paginatedWorlds.forEach(world => {
            const row = document.createElement('tr');
            row.className = 'hover:bg-white/10';
            if (currentSelectedWorld === world.name) {
                row.classList.add('bg-indigo-900/20');
            }
            
            // Escape single quotes in world name for JavaScript
            const escapedWorldName = world.name.replace(/'/g, "\\'");
            
            row.innerHTML = `
                <td class="px-4 py-3 whitespace-nowrap">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 h-8 w-8 rounded-full bg-white/5 flex items-center justify-center">
                            ${getWorldIcon(world.environment)}
                        </div>
                        <div class="ml-3">
                            <div class="text-sm font-medium text-white">${world.name}</div>
                        </div>
                    </div>
                </td>
                <td class="px-4 py-3 whitespace-nowrap">
                    <div class="text-sm text-gray-300">${formatEnvironment(world.environment)}</div>
                </td>
                <td class="px-4 py-3 whitespace-nowrap">
                    <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${world.players > 0 ? 'bg-green-600/20 text-green-400' : 'bg-gray-600/20 text-gray-400'}">
                        ${world.players} player${world.players !== 1 ? 's' : ''}
                    </span>
                </td>
                <td class="px-4 py-3 whitespace-nowrap">
                    <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${world.loaded ? 'bg-blue-600/20 text-blue-400' : 'bg-gray-600/20 text-gray-400'}">
                        ${world.loaded ? 'Loaded' : 'Unloaded'}
                    </span>
                </td>
                <td class="px-4 py-3 whitespace-nowrap text-right text-sm font-medium">
                    <button onclick="selectWorld('${escapedWorldName}')" class="text-indigo-400 hover:text-indigo-300 mr-2">
                        Select
                    </button>
                    <button onclick="quickTeleportToWorld('${escapedWorldName}')" class="text-green-400 hover:text-green-300" ${world.loaded ? '' : 'disabled'}>
                        Teleport
                    </button>
                </td>
            `;
            tbody.appendChild(row);
        });
    } catch (error) {
        console.error('Error updating world list display:', error);
        showAlert('error', 'Error', 'Failed to update world list display');
    }
}

function getWorldIcon(environment) {
    const icons = {
        'NORMAL': `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>`,
        'NETHER': `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.879 16.121A3 3 0 1012.015 11L11 14H9c0 .768.293 1.536.879 2.121z" />
        </svg>`,
        'THE_END': `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
        </svg>`
    };
    return icons[environment] || icons['NORMAL'];
}

function formatEnvironment(env) {
    const names = {
        'NORMAL': 'Overworld',
        'NETHER': 'Nether',
        'THE_END': 'The End',
        'CUSTOM': 'Custom'
    };
    return names[env] || env;
}

function selectWorld(worldName) {
    currentSelectedWorld = worldName;
    const selectedWorldNameElement = document.getElementById('selected-world-name');
    const worldSettingsPanel = document.getElementById('world-settings-panel');
    const worldInfoPanel = document.getElementById('world-info-panel');
    
    if (selectedWorldNameElement) selectedWorldNameElement.textContent = worldName;
    if (worldSettingsPanel) worldSettingsPanel.classList.remove('hidden');
    if (worldInfoPanel) worldInfoPanel.classList.remove('hidden');
    
    // Highlight selected row
    updateWorldListDisplay();
    
    // Update world info panel
    const world = worldsData.find(w => w.name === worldName);
    if (world) {
        document.getElementById('info-world-name').textContent = world.name;
        document.getElementById('info-world-env').textContent = formatEnvironment(world.environment);
        document.getElementById('info-world-status').textContent = world.loaded ? 'Loaded' : 'Unloaded';
        document.getElementById('info-world-players').textContent = `${world.players} player${world.players !== 1 ? 's' : ''}`;
        document.getElementById('info-world-created').textContent = world.created;
        document.getElementById('info-world-size').textContent = world.size;
    }
    
    // Load world settings (simulated - in a real implementation you would fetch these)
    if (world) {
        // These would be fetched from the server in a real implementation
        const pvpCheckbox = document.getElementById('world-pvp');
        const animalsCheckbox = document.getElementById('world-animals');
        const monstersCheckbox = document.getElementById('world-monsters');
        const weatherCheckbox = document.getElementById('world-weather');
        const structuresCheckbox = document.getElementById('world-structures');
        const autohealCheckbox = document.getElementById('world-autoheal');
        const keepInventoryCheckbox = document.getElementById('world-keep-inventory');
        const fireSpreadCheckbox = document.getElementById('world-fire-spread');
        
        if (pvpCheckbox) pvpCheckbox.checked = true;
        if (animalsCheckbox) animalsCheckbox.checked = true;
        if (monstersCheckbox) monstersCheckbox.checked = true;
        if (weatherCheckbox) weatherCheckbox.checked = true;
        if (structuresCheckbox) structuresCheckbox.checked = true;
        if (autohealCheckbox) autohealCheckbox.checked = false;
        if (keepInventoryCheckbox) keepInventoryCheckbox.checked = false;
        if (fireSpreadCheckbox) fireSpreadCheckbox.checked = true;
        
        const animalsLimitInput = document.getElementById('world-animals-limit');
        const monstersLimitInput = document.getElementById('world-monsters-limit');
        const gamemodeSelect = document.getElementById('world-gamemode');
        const gamemodeOverrideSelect = document.getElementById('world-gamemode-override');
        const borderSizeInput = document.getElementById('world-border-size');
        const borderDamageInput = document.getElementById('world-border-damage');
        const spawnXInput = document.getElementById('world-spawn-x');
        const spawnYInput = document.getElementById('world-spawn-y');
        const spawnZInput = document.getElementById('world-spawn-z');
        
        if (animalsLimitInput) animalsLimitInput.value = '10';
        if (monstersLimitInput) monstersLimitInput.value = '15';
        if (gamemodeSelect) gamemodeSelect.value = 'SURVIVAL';
        if (gamemodeOverrideSelect) gamemodeOverrideSelect.value = 'NONE';
        if (borderSizeInput) borderSizeInput.value = '6000';
        if (borderDamageInput) borderDamageInput.value = '0.2';
        if (spawnXInput) spawnXInput.value = '0';
        if (spawnYInput) spawnYInput.value = '64';
        if (spawnZInput) spawnZInput.value = '0';
    }
    
    // Scroll to settings panel
    worldSettingsPanel?.scrollIntoView({ behavior: 'smooth' });
}

function quickTeleportToWorld(worldName) {
    const player = document.getElementById('player-name')?.value.trim();
    if (!player) {
        showAlert('error', 'Error', 'Please select a player first');
        return;
    }
    
    executeServerCommand(`mv tp ${worldName} ${player}`);
    showAlert('success', 'Teleporting', `Teleporting ${player} to ${worldName}`);
}

function teleportToSelectedWorld() {
    if (!currentSelectedWorld) {
        showAlert('error', 'Error', 'Please select a world first');
        return;
    }
    
    const player = document.getElementById('player-name')?.value.trim();
    if (!player) {
        showAlert('error', 'Error', 'Please select a player first');
        return;
    }
    
    executeServerCommand(`mv tp ${currentSelectedWorld} ${player}`);
    showAlert('success', 'Teleporting', `Teleporting ${player} to ${currentSelectedWorld}`);
}

function showTeleportAllModal() {
    const modal = document.getElementById('teleportAllModal');
    const select = document.getElementById('teleport-all-world');
    
    if (!modal || !select) return;
    
    // Clear any previous errors
    document.getElementById('teleport-world-error')?.classList.add('hidden');
    
    // Populate world select
    select.innerHTML = '<option value="">Select a world</option>';
    worldsData.forEach(world => {
        if (world.loaded) {
            const option = document.createElement('option');
            option.value = world.name;
            option.textContent = world.name;
            if (currentSelectedWorld === world.name) {
                option.selected = true;
            }
            select.appendChild(option);
        }
    });
    
    modal.classList.add('active');
}

function updateTeleportFilterFields() {
    const filter = document.getElementById('teleport-all-filter')?.value || 'all';
    const extraFields = document.getElementById('teleport-all-extra-fields');
    
    if (!extraFields) return;
    
    extraFields.innerHTML = '';
    
    switch(filter) {
        case 'group':
            extraFields.innerHTML = `
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Group/Team Name</label>
                    <input type="text" id="teleport-all-group" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Enter group/team name">
                </div>
            `;
            break;
        case 'permission':
            extraFields.innerHTML = `
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-1">Permission Node</label>
                    <input type="text" id="teleport-all-permission" class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm focus:ring-2 focus:ring-indigo-500 focus:border-transparent" placeholder="Enter permission node">
                </div>
            `;
            break;
    }
    
    if (filter === 'group' || filter === 'permission') {
        extraFields.classList.remove('hidden');
    } else {
        extraFields.classList.add('hidden');
    }
}

function teleportAllPlayers() {
    const world = document.getElementById('teleport-all-world')?.value;
    const filter = document.getElementById('teleport-all-filter')?.value || 'all';
    const errorElement = document.getElementById('teleport-world-error');
    
    if (!world) {
        errorElement?.classList.remove('hidden');
        return;
    }
    
    errorElement?.classList.add('hidden');
    
    let command = `mv tp ${world} @a`;
    
    // Add filters based on selection
    switch(filter) {
        case 'current':
            if (!currentSelectedWorld) {
                showAlert('error', 'Error', 'No current world selected');
                return;
            }
            command = `execute in ${currentSelectedWorld} run tp @a ${world}`;
            break;
        case 'group':
            const group = document.getElementById('teleport-all-group')?.value;
            if (!group) {
                showAlert('error', 'Error', 'Please enter a group name');
                return;
            }
            command = `mv tp ${world} @a[team=${group}]`;
            break;
        case 'permission':
            const permission = document.getElementById('teleport-all-permission')?.value;
            if (!permission) {
                showAlert('error', 'Error', 'Please enter a permission');
                return;
            }
            command = `mv tp ${world} @a[permission=${permission}]`;
            break;
    }
    
    executeServerCommand(command);
    hideModal('teleportAllModal');
    showAlert('success', 'Teleporting', `Teleporting players to ${world}`);
}

function loadSelectedWorld() {
    if (!currentSelectedWorld) {
        showAlert('error', 'Error', 'Please select a world first');
        return;
    }
    
    executeServerCommand(`mv load ${currentSelectedWorld}`);
    setTimeout(reloadWorlds, 1000);
    showAlert('info', 'Loading', `Loading world ${currentSelectedWorld}`);
}

function unloadSelectedWorld() {
    if (!currentSelectedWorld) {
        showAlert('error', 'Error', 'Please select a world first');
        return;
    }
    
    executeServerCommand(`mv unload ${currentSelectedWorld}`);
    setTimeout(reloadWorlds, 1000);
    showAlert('info', 'Unloading', `Unloading world ${currentSelectedWorld}`);
}

function showDeleteWorldModal() {
    if (!currentSelectedWorld) {
        showAlert('error', 'Error', 'Please select a world first');
        return;
    }
    
    const modal = document.getElementById('deleteWorldModal');
    const deleteMessage = document.getElementById('delete-world-message');
    
    if (!modal || !deleteMessage) return;
    
    deleteMessage.textContent = 
        `Are you sure you want to PERMANENTLY delete the world "${currentSelectedWorld}"? This cannot be undone!`;
    
    modal.classList.add('active');
}

function confirmDeleteWorld() {
    if (!currentSelectedWorld) return;
    
    const backup = document.getElementById('delete-world-backup')?.checked || false;
    let command = `mv delete ${currentSelectedWorld}`;
    
    if (backup) {
        command += ' confirm';
        showAlert('warning', 'Backup Required', 'Backup functionality needs to be implemented');
        return;
    }
    
    executeServerCommand(command);
    hideModal('deleteWorldModal');
    
    // Reset selection
    currentSelectedWorld = null;
    document.getElementById('world-settings-panel')?.classList.add('hidden');
    document.getElementById('world-info-panel')?.classList.add('hidden');
    
    setTimeout(reloadWorlds, 2000);
    showAlert('warning', 'Deleting', `World ${currentSelectedWorld} is being deleted...`);
}

function setWorldDifficulty(difficulty) {
    if (!currentSelectedWorld) {
        showAlert('error', 'Error', 'Please select a world first');
        return;
    }
    
    executeServerCommand(`difficulty ${difficulty} ${currentSelectedWorld}`);
    showAlert('success', 'Difficulty Set', `World difficulty set to ${difficulty.toLowerCase()}`);
}

function setWorldTime(time) {
    if (!currentSelectedWorld) {
        showAlert('error', 'Error', 'Please select a world first');
        return;
    }
    
    let timeValue = 'day';
    if (time === 'night') timeValue = 'night';
    
    executeServerCommand(`time set ${timeValue} ${currentSelectedWorld}`);
    showAlert('success', 'Time Set', `World time set to ${timeValue}`);
}

function toggleWorldTime() {
    if (!currentSelectedWorld) {
        showAlert('error', 'Error', 'Please select a world first');
        return;
    }
    
    executeServerCommand(`gamerule doDaylightCycle ${currentSelectedWorld}`);
    showAlert('success', 'Time Cycle', `Toggled daylight cycle for world`);
}

function getCurrentSpawnLocation() {
    if (!currentSelectedWorld) {
        showAlert('error', 'Error', 'Please select a world first');
        return;
    }
    
    // In a real implementation, this would fetch the current spawn location from the server
    // For now, we'll simulate it with default values
    document.getElementById('world-spawn-x').value = '0';
    document.getElementById('world-spawn-y').value = '64';
    document.getElementById('world-spawn-z').value = '0';
    
    showAlert('info', 'Spawn Location', 'Fetched current spawn location (simulated)');
}

function resetWorldSettings() {
    if (!currentSelectedWorld) {
        showAlert('error', 'Error', 'Please select a world first');
        return;
    }
    
    if (!confirm('Are you sure you want to reset all settings to default?')) {
        return;
    }
    
    // Reset checkboxes
    const checkboxes = [
        'world-pvp', 'world-animals', 'world-monsters', 'world-weather',
        'world-structures', 'world-autoheal', 'world-keep-inventory', 'world-fire-spread'
    ];
    
    checkboxes.forEach(id => {
        const checkbox = document.getElementById(id);
        if (checkbox) {
            checkbox.checked = false;
        }
    });
    
    // Reset other inputs
    document.getElementById('world-animals-limit').value = '10';
    document.getElementById('world-monsters-limit').value = '15';
    document.getElementById('world-gamemode').value = 'SURVIVAL';
    document.getElementById('world-gamemode-override').value = 'NONE';
    document.getElementById('world-border-size').value = '6000';
    document.getElementById('world-border-damage').value = '0.2';
    document.getElementById('world-spawn-x').value = '0';
    document.getElementById('world-spawn-y').value = '64';
    document.getElementById('world-spawn-z').value = '0';
    
    showAlert('info', 'Settings Reset', 'All settings have been reset to default values');
}

function saveWorldSettings() {
    if (!currentSelectedWorld) {
        showAlert('error', 'Error', 'Please select a world first');
        return;
    }
    
    // Get all settings
    const pvp = document.getElementById('world-pvp')?.checked ? 'on' : 'off';
    const animals = document.getElementById('world-animals')?.checked ? 'on' : 'off';
    const monsters = document.getElementById('world-monsters')?.checked ? 'on' : 'off';
    const weather = document.getElementById('world-weather')?.checked ? 'on' : 'off';
    const structures = document.getElementById('world-structures')?.checked ? 'on' : 'off';
    const autoheal = document.getElementById('world-autoheal')?.checked ? 'on' : 'off';
    const keepInventory = document.getElementById('world-keep-inventory')?.checked ? 'on' : 'off';
    const fireSpread = document.getElementById('world-fire-spread')?.checked ? 'on' : 'off';
    
    const animalsLimit = document.getElementById('world-animals-limit')?.value;
    const monstersLimit = document.getElementById('world-monsters-limit')?.value;
    const gamemode = document.getElementById('world-gamemode')?.value;
    const gamemodeOverride = document.getElementById('world-gamemode-override')?.value;
    const borderSize = document.getElementById('world-border-size')?.value;
    const borderDamage = document.getElementById('world-border-damage')?.value;
    const spawnX = document.getElementById('world-spawn-x')?.value;
    const spawnY = document.getElementById('world-spawn-y')?.value;
    const spawnZ = document.getElementById('world-spawn-z')?.value;
    
    // Validate inputs
    if (!animalsLimit || !monstersLimit || !borderSize || !borderDamage || 
        !spawnX || !spawnY || !spawnZ) {
        showAlert('error', 'Error', 'Please fill in all required fields');
        return;
    }
    
    // Execute commands to update settings
    executeServerCommand(`mv set pvp ${pvp} ${currentSelectedWorld}`);
    executeServerCommand(`mv set animals ${animals} ${currentSelectedWorld}`);
    executeServerCommand(`mv set monsters ${monsters} ${currentSelectedWorld}`);
    executeServerCommand(`mv set weather ${weather} ${currentSelectedWorld}`);
    executeServerCommand(`mv set structures ${structures} ${currentSelectedWorld}`);
    executeServerCommand(`mv set autoheal ${autoheal} ${currentSelectedWorld}`);
    executeServerCommand(`mv set keepinventory ${keepInventory} ${currentSelectedWorld}`);
    executeServerCommand(`mv set firespread ${fireSpread} ${currentSelectedWorld}`);
    
    executeServerCommand(`mv set spawnlimits animals ${animalsLimit} ${currentSelectedWorld}`);
    executeServerCommand(`mv set spawnlimits monsters ${monstersLimit} ${currentSelectedWorld}`);
    
    if (gamemodeOverride !== 'NONE') {
        executeServerCommand(`mv set gamemode ${gamemodeOverride} ${currentSelectedWorld}`);
    }
    
    executeServerCommand(`worldborder set ${borderSize} ${currentSelectedWorld}`);
    executeServerCommand(`worldborder damage amount ${borderDamage} ${currentSelectedWorld}`);
    
    executeServerCommand(`mv set spawn ${spawnX} ${spawnY} ${spawnZ} ${currentSelectedWorld}`);
    
    showAlert('success', 'Settings Saved', `World settings updated for ${currentSelectedWorld}`);
}

// WebSocket message handler for world list
ws.onmessage = (msg) => {
    try {
        const data = msg.data;
        
        // Check if this is a world list response
        if (data.includes("=== Worlds ===") || data.startsWith("Worlds:")) {
            parseWorldList(data);
            return;
        }
        
        // Handle other message types here...
        
    } catch (error) {
        console.error('Error handling WebSocket message:', error);
    }
};

// Initialize when page loads
document.addEventListener('DOMContentLoaded', () => {
    // Set up worlds tab click handler
    const worldsTab = document.querySelector('.tab[data-tab="worlds"]');
    if (worldsTab) {
        worldsTab.addEventListener('click', () => {
            switchTab('worlds');
        });
    }
    
    // Set up initial event listeners
    setupWorldsEventListeners();
});

// Tab switching function
function switchTab(tabId) {
    // Hide all tab contents
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Show selected tab content
    const tabContent = document.getElementById(`${tabId}-tab`);
    if (tabContent) {
        tabContent.classList.add('active');
    }
    
    // Update tab styling
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    const selectedTab = document.querySelector(`.tab[data-tab="${tabId}"]`);
    if (selectedTab) {
        selectedTab.classList.add('active');
    }
    
    // Special initialization for worlds tab
    if (tabId === 'worlds') {
        initWorldManagement();
    }
    
    // Scroll to top of section
    document.getElementById('player-management')?.scrollIntoView({ behavior: 'smooth' });
}
</script>


<!-- Alert Toast -->
<div id="alertToast" class="fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 opacity-0 transform translate-x-8 transition-all duration-300 hidden">
    <div class="flex items-center">
        <svg id="alertIcon" class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
        </svg>
        <div>
            <h3 id="alertTitle" class="font-medium"></h3>
            <p id="alertMessage" class="text-sm"></p>
        </div>
    </div>
</div>

<!-- Player Action Confirmation Modal -->
<div id="playerActionModal" class="modal-overlay">
    <div class="bg-gray-800 rounded-lg p-6 w-full max-w-md">
        <h3 id="playerActionTitle" class="text-lg font-medium text-white mb-4"></h3>
        <p id="playerActionMessage" class="text-gray-300 mb-6"></p>
        <div class="flex justify-end space-x-3">
            <button onclick="document.getElementById('playerActionModal').classList.remove('active')" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition">
                Cancel
            </button>
            <button id="confirmPlayerAction" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 text-white rounded-lg transition">
                Confirm
            </button>
        </div>
    </div>
</div>

<!-- Player Info Modal -->
<div id="playerInfoModal" class="modal-overlay">
    <div class="bg-gray-800 rounded-lg p-6 w-full max-w-md">
        <div class="flex justify-between items-start mb-4">
            <h3 id="playerInfoTitle" class="text-lg font-medium text-white"></h3>
            <button onclick="document.getElementById('playerInfoModal').classList.remove('active')" class="text-gray-400 hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div id="playerInfoContent" class="text-gray-300">
            <!-- Player info will be loaded here -->
        </div>
    </div>
</div>

<script>
    // Enhanced Player Management Functions
    const playerCache = {};
    let currentSelectedPlayer = null;

    function executePlayerAction(action) {
        const playerName = document.getElementById('player-name').value.trim();
        if (!playerName) {
            showAlert('error', 'Error', 'Please enter a player name');
            return;
        }

        let command;
        let successMessage = '';
        let confirmationMessage = '';

        switch(action) {
            case 'ban':
                const banReason = document.getElementById('ban-reason').value.trim();
                command = `ban ${playerName} ${banReason || ''}`.trim();
                successMessage = `Player ${playerName} has been banned`;
                confirmationMessage = `Are you sure you want to ban ${playerName}?${banReason ? ` Reason: ${banReason}` : ''}`;
                break;
            case 'pardon':
                command = `pardon ${playerName}`;
                successMessage = `Player ${playerName} has been unbanned`;
                confirmationMessage = `Are you sure you want to unban ${playerName}?`;
                break;
            case 'kick':
                const kickReason = document.getElementById('kick-reason').value.trim();
                command = `kick ${playerName} ${kickReason || ''}`.trim();
                successMessage = `Player ${playerName} has been kicked`;
                confirmationMessage = `Are you sure you want to kick ${playerName}?${kickReason ? ` Reason: ${kickReason}` : ''}`;
                break;
            case 'op':
                command = `op ${playerName}`;
                successMessage = `Player ${playerName} has been opped`;
                confirmationMessage = `Are you sure you want to give OP to ${playerName}?`;
                break;
            case 'deop':
                command = `deop ${playerName}`;
                successMessage = `Player ${playerName} has been deopped`;
                confirmationMessage = `Are you sure you want to remove OP from ${playerName}?`;
                break;
            case 'whitelist add':
                command = `whitelist add ${playerName}`;
                successMessage = `Player ${playerName} has been whitelisted`;
                confirmationMessage = `Are you sure you want to whitelist ${playerName}?`;
                break;
            default:
                return;
        }

        // Show confirmation modal
        const modal = document.getElementById('playerActionModal');
        document.getElementById('playerActionTitle').textContent = `Confirm ${action}`;
        document.getElementById('playerActionMessage').textContent = confirmationMessage;

        // Set up confirm button
        const confirmBtn = document.getElementById('confirmPlayerAction');
        confirmBtn.onclick = function() {
            if (ws) {
                ws.send(JSON.stringify({
                    event: 'cmd',
                    command: command,
                    containerId: instanceId
                }));

                // Show feedback in console
                term.write(`\r\n\u001b[1m\u001b[33m[panel] \u001b[0mExecuted: ${command}\r\n`);

                // Add to command history
                addToCommandHistory(command);

                // Show success alert
                showAlert('success', 'Action Executed', successMessage);

                // Refresh player list if action affects online status
                if (['kick', 'ban'].includes(action)) {
                    setTimeout(refreshPlayerList, 1000);
                }

                // Refresh specific lists based on action
                if (action === 'ban' || action === 'pardon') {
                    setTimeout(refreshBansList, 1000);
                } else if (action === 'op' || action === 'deop') {
                    setTimeout(refreshOpsList, 1000);
                } else if (action === 'whitelist add') {
                    setTimeout(refreshWhitelist, 1000);
                }

                modal.classList.remove('active');
            } else {
                showAlert('error', 'Connection Error', 'Not connected to server');
            }
        };

        modal.classList.add('active');
    }

    function executeCustomCommand() {
        const command = document.getElementById('custom-command').value.trim();
        const playerName = document.getElementById('player-name').value.trim();

        if (!command) {
            showAlert('error', 'Error', 'Please enter a command');
            return;
        }

        let fullCommand = command;
        if (playerName && command.includes('{player}')) {
            fullCommand = command.replace('{player}', playerName);
        } else if (playerName && !command.startsWith('/')) {
            fullCommand = `${command} ${playerName}`;
        }

        if (ws) {
            ws.send(JSON.stringify({
                event: 'cmd',
                command: fullCommand,
                containerId: instanceId
            }));

            term.write(`\r\n\u001b[1m\u001b[33m[panel] \u001b[0mExecuted: ${fullCommand}\r\n`);
            addToCommandHistory(fullCommand);
            showAlert('success', 'Command Executed', `Command sent to server: ${fullCommand}`);
        } else {
            showAlert('error', 'Connection Error', 'Not connected to server');
        }
    }

    function executeServerCommand(command) {
        if (ws) {
            ws.send(JSON.stringify({
                event: 'cmd',
                command: command,
                containerId: instanceId
            }));

            term.write(`\r\n\u001b[1m\u001b[33m[panel] \u001b[0mExecuted: ${command}\r\n`);
            addToCommandHistory(command);
            showAlert('success', 'Command Executed', `Command sent to server: ${command}`);
        } else {
            showAlert('error', 'Connection Error', 'Not connected to server');
        }
    }

    function refreshPlayerList() {
        if (ws) {
            ws.send(JSON.stringify({
                event: 'cmd',
                command: 'list',
                containerId: instanceId
            }));

            // Show loading state
            const onlinePlayersDiv = document.getElementById('players-grid');
            onlinePlayersDiv.innerHTML = '<div class="col-span-2 flex items-center justify-center py-8"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-400"></div></div>';
        } else {
            showAlert('error', 'Connection Error', 'Not connected to server');
        }
    }

    function refreshWhitelist() {
        if (ws) {
            ws.send(JSON.stringify({
                event: 'cmd',
                command: 'whitelist list',
                containerId: instanceId
            }));

            // Show loading state
            const whitelistDiv = document.getElementById('whitelist-players');
            whitelistDiv.innerHTML = '<p class="text-sm text-gray-400 text-center mt-16">Loading whitelist...</p>';
        } else {
            showAlert('error', 'Connection Error', 'Not connected to server');
        }
    }

    function refreshBansList() {
        if (ws) {
            ws.send(JSON.stringify({
                event: 'cmd',
                command: 'banlist',
                containerId: instanceId
            }));

            // Show loading state
            const bansDiv = document.getElementById('bans-list');
            bansDiv.innerHTML = '<p class="text-sm text-gray-400 text-center mt-16">Loading ban list...</p>';
        } else {
            showAlert('error', 'Connection Error', 'Not connected to server');
        }
    }

    function refreshOpsList() {
        if (ws) {
            ws.send(JSON.stringify({
                event: 'cmd',
                command: 'op list',
                containerId: instanceId
            }));

            // Show loading state
            const opsDiv = document.getElementById('ops-list');
            opsDiv.innerHTML = '<p class="text-sm text-gray-400 text-center mt-16">Loading OP list...</p>';
        } else {
            showAlert('error', 'Connection Error', 'Not connected to server');
        }
    }

    function whitelistAddPlayer() {
        const playerName = document.getElementById('whitelist-name').value.trim();
        if (!playerName) {
            showAlert('error', 'Error', 'Please enter a player name');
            return;
        }

        executeServerCommand(`whitelist add ${playerName}`);
        setTimeout(refreshWhitelist, 1000);
    }

    function whitelistRemovePlayer() {
        const playerName = document.getElementById('whitelist-name').value.trim();
        if (!playerName) {
            showAlert('error', 'Error', 'Please enter a player name');
            return;
        }

        executeServerCommand(`whitelist remove ${playerName}`);
        setTimeout(refreshWhitelist, 1000);
    }

    function banPlayer() {
        const playerName = document.getElementById('ban-name').value.trim();
        if (!playerName) {
            showAlert('error', 'Error', 'Please enter a player name');
            return;
        }

        const reason = document.getElementById('ban-details-reason').value.trim();
        const duration = document.getElementById('ban-duration').value;
        
        let command = `ban ${playerName}`;
        if (reason) command += ` ${reason}`;
        
        // Handle timed bans if implemented
        if (duration !== 'permanent') {
            command += ` ${duration}`;
        }

        executeServerCommand(command);
        setTimeout(refreshBansList, 1000);
    }

    function pardonPlayer() {
        const playerName = document.getElementById('ban-name').value.trim();
        if (!playerName) {
            showAlert('error', 'Error', 'Please enter a player name');
            return;
        }

        executeServerCommand(`pardon ${playerName}`);
        setTimeout(refreshBansList, 1000);
    }

    function opPlayer() {
        const playerName = document.getElementById('op-name').value.trim();
        if (!playerName) {
            showAlert('error', 'Error', 'Please enter a player name');
            return;
        }

        const level = document.getElementById('op-level').value;
        const bypassLimit = document.getElementById('op-bypass-limit').checked;
        
        let command = `op ${playerName}`;
        if (level !== '4') command += ` ${level}`;
        if (bypassLimit) command += ` bypass_limit`;

        executeServerCommand(command);
        setTimeout(refreshOpsList, 1000);
    }

    function deopPlayer() {
        const playerName = document.getElementById('op-name').value.trim();
        if (!playerName) {
            showAlert('error', 'Error', 'Please enter a player name');
            return;
        }

        executeServerCommand(`deop ${playerName}`);
        setTimeout(refreshOpsList, 1000);
    }

    function teleportPlayerToPlayer() {
        const fromPlayer = document.getElementById('teleport-player-from').value.trim();
        const toPlayer = document.getElementById('teleport-player-to').value.trim();
        
        if (!fromPlayer || !toPlayer) {
            showAlert('error', 'Error', 'Please enter both player names');
            return;
        }

        executeServerCommand(`tp ${fromPlayer} ${toPlayer}`);
    }

    function teleportPlayerToLocation() {
        const player = document.getElementById('teleport-player-from').value.trim();
        const location = document.getElementById('teleport-player-to').value.trim();
        
        if (!player || !location) {
            showAlert('error', 'Error', 'Please enter player name and location');
            return;
        }

        executeServerCommand(`tp ${player} ${location}`);
    }

    function teleportAllToPlayer() {
        const toPlayer = document.getElementById('teleport-player-to').value.trim();
        
        if (!toPlayer) {
            showAlert('error', 'Error', 'Please enter target player name');
            return;
        }

        executeServerCommand(`tp @a ${toPlayer}`);
    }

    function givePlayerEffect() {
        const player = document.getElementById('effect-player').value.trim();
        const effect = document.getElementById('effect-type').value;
        const duration = document.getElementById('effect-duration').value;
        const amplifier = document.getElementById('effect-amplifier').value;
        
        if (!player) {
            showAlert('error', 'Error', 'Please enter player name');
            return;
        }

        executeServerCommand(`effect give ${player} ${effect} ${duration} ${amplifier}`);
    }

    function clearPlayerEffect() {
        const player = document.getElementById('effect-player').value.trim();
        const effect = document.getElementById('effect-type').value;
        
        if (!player) {
            showAlert('error', 'Error', 'Please enter player name');
            return;
        }

        executeServerCommand(`effect clear ${player} ${effect}`);
    }

    function clearAllPlayerEffects() {
        const player = document.getElementById('effect-player').value.trim();
        
        if (!player) {
            showAlert('error', 'Error', 'Please enter player name');
            return;
        }

        executeServerCommand(`effect clear ${player}`);
    }

    function giveAllPlayersEffect() {
        const effect = document.getElementById('effect-type').value;
        const duration = document.getElementById('effect-duration').value;
        const amplifier = document.getElementById('effect-amplifier').value;

        executeServerCommand(`effect give @a ${effect} ${duration} ${amplifier}`);
    }

    function setPlayerGamemode(gamemode) {
        const player = document.getElementById('gamemode-player').value.trim();
        
        if (!player) {
            showAlert('error', 'Error', 'Please enter player name');
            return;
        }

        executeServerCommand(`gamemode ${gamemode} ${player}`);
    }

    function setAllPlayersGamemode(gamemode) {
        executeServerCommand(`gamemode ${gamemode} @a`);
    }

    function viewPlayerInventory() {
        const player = document.getElementById('inventory-player').value.trim();
        
        if (!player) {
            showAlert('error', 'Error', 'Please enter player name');
            return;
        }

        // This would require a plugin or mod to work
        showAlert('info', 'Info', 'Inventory viewing requires a plugin like EssentialsX or similar');
    }

    function clearPlayerInventory() {
        const player = document.getElementById('inventory-player').value.trim();
        
        if (!player) {
            showAlert('error', 'Error', 'Please enter player name');
            return;
        }

        executeServerCommand(`clear ${player}`);
    }

    function sendPlayerMessage() {
        const message = document.getElementById('player-message').value.trim();
        const target = document.getElementById('message-target').value;
        
        if (!message) {
            showAlert('error', 'Error', 'Please enter a message');
            return;
        }

        let command;
        switch(target) {
            case 'all':
                command = `say ${message}`;
                break;
            case 'selected':
                const player = document.getElementById('player-name').value.trim();
                if (!player) {
                    showAlert('error', 'Error', 'Please select a player first');
                    return;
                }
                command = `tell ${player} ${message}`;
                break;
            case 'ops':
                command = `tell @a[team=ops] ${message}`;
                break;
            default:
                command = `say ${message}`;
        }

        executeServerCommand(command);
    }

    function sendPlayerTitle() {
        const message = document.getElementById('player-message').value.trim();
        const target = document.getElementById('message-target').value;
        
        if (!message) {
            showAlert('error', 'Error', 'Please enter a message');
            return;
        }

        let selector;
        switch(target) {
            case 'all':
                selector = '@a';
                break;
            case 'selected':
                const player = document.getElementById('player-name').value.trim();
                if (!player) {
                    showAlert('error', 'Error', 'Please select a player first');
                    return;
                }
                selector = player;
                break;
            case 'ops':
                selector = '@a[team=ops]';
                break;
            default:
                selector = '@a';
        }

        executeServerCommand(`title ${selector} title ${message}`);
    }

    function sendPlayerActionBar() {
        const message = document.getElementById('player-message').value.trim();
        const target = document.getElementById('message-target').value;
        
        if (!message) {
            showAlert('error', 'Error', 'Please enter a message');
            return;
        }

        let selector;
        switch(target) {
            case 'all':
                selector = '@a';
                break;
            case 'selected':
                const player = document.getElementById('player-name').value.trim();
                if (!player) {
                    showAlert('error', 'Error', 'Please select a player first');
                    return;
                }
                selector = player;
                break;
            case 'ops':
                selector = '@a[team=ops]';
                break;
            default:
                selector = '@a';
        }

        executeServerCommand(`title ${selector} actionbar ${message}`);
    }

    function parsePlayerList(message) {
        // Remove ANSI color codes from the message first
        const cleanedMessage = message.replace(/\x1B\[[0-9;]*[mK]/g, '');

        const onlinePlayersDiv = document.getElementById('players-grid');
        const countSpan = document.getElementById('online-count');

        if (cleanedMessage.includes("There are 0/")) {
            const match = cleanedMessage.match(/There are 0\/(\d+) players online/);
            if (match) {
                countSpan.textContent = `0/${match[1]}`;
            }
            onlinePlayersDiv.innerHTML = '<p class="text-sm text-gray-400 text-center col-span-2 mt-16">No players currently online</p>';
            return;
        }

        const playersMatch = cleanedMessage.match(/online: (.*)/);
        if (playersMatch && playersMatch[1]) {
            const players = playersMatch[1].split(', ').map(player => player.trim());
            const maxPlayersMatch = cleanedMessage.match(/There are \d+\/(\d+) players online/);
            const maxPlayers = maxPlayersMatch ? maxPlayersMatch[1] : '?';
            
            countSpan.textContent = `${players.length}/${maxPlayers}`;
            
            let html = '';
            players.forEach(player => {
                // Ensure player name is clean of any remaining ANSI codes
                const cleanPlayer = player.replace(/\x1B\[[0-9;]*[mK]/g, '');
                if (cleanPlayer) {  // Only add if player name is not empty after cleaning
                    const playerHead = `https://mc-heads.net/avatar/${encodeURIComponent(cleanPlayer)}/32`;
                    
                    html += `
                        <div class="player-card flex items-center justify-between bg-white/5 p-3 rounded cursor-pointer" onclick="showPlayerInfo('${cleanPlayer.replace(/'/g, "\\'")}">
                            <div class="flex items-center">
                                <div class="player-head" style="background-image: url('${playerHead}')"></div>
                                <span class="text-sm text-white">${cleanPlayer}</span>
                            </div>
                            <div class="flex space-x-1">
                                <button onclick="event.stopPropagation(); document.getElementById('player-name').value='${cleanPlayer.replace(/'/g, "\\'")}';" class="text-xs bg-indigo-600/50 hover:bg-indigo-600 px-1.5 py-0.5 rounded">
                                    Select
                                </button>
                                <button onclick="event.stopPropagation(); document.getElementById('player-name').value='${cleanPlayer.replace(/'/g, "\\'")}'; executePlayerAction('kick')" class="text-xs bg-orange-600/50 hover:bg-orange-600 px-1.5 py-0.5 rounded">
                                    Kick
                                </button>
                                <button onclick="event.stopPropagation(); document.getElementById('player-name').value='${cleanPlayer.replace(/'/g, "\\'")}'; executePlayerAction('ban')" class="text-xs bg-red-600/50 hover:bg-red-600 px-1.5 py-0.5 rounded">
                                    Ban
                                </button>
                            </div>
                        </div>
                    `;
                }
            });
            onlinePlayersDiv.innerHTML = html;
        } else {
            onlinePlayersDiv.innerHTML = '<p class="text-sm text-gray-400 text-center col-span-2 mt-16">Could not parse player list</p>';
        }
    }

    function parseWhitelist(message) {
        const cleanedMessage = message.replace(/\x1B\[[0-9;]*[mK]/g, '');
        const whitelistDiv = document.getElementById('whitelist-players');
        const countSpan = document.getElementById('whitelist-count');

        if (cleanedMessage.includes("There are no whitelisted players")) {
            countSpan.textContent = '0';
            whitelistDiv.innerHTML = '<p class="text-sm text-gray-400 text-center mt-16">No players are whitelisted</p>';
            return;
        }

        const playersMatch = cleanedMessage.match(/whitelisted players: (.*)/);
        if (playersMatch && playersMatch[1]) {
            const players = playersMatch[1].split(', ').map(player => player.trim());
            countSpan.textContent = players.length;
            
            let html = '';
            players.forEach(player => {
                const cleanPlayer = player.replace(/\x1B\[[0-9;]*[mK]/g, '');
                if (cleanPlayer) {
                    const playerHead = `https://mc-heads.net/avatar/${encodeURIComponent(cleanPlayer)}/32`;
                    
                    html += `
                        <div class="whitelist-item">
                            <div class="flex items-center">
                                <div class="player-head" style="background-image: url('${playerHead}')"></div>
                                <span class="text-sm text-white ml-2">${cleanPlayer}</span>
                            </div>
                            <div class="flex space-x-1">
                                <button onclick="document.getElementById('whitelist-name').value='${cleanPlayer.replace(/'/g, "\\'")}'" class="text-xs bg-indigo-600/50 hover:bg-indigo-600 px-1.5 py-0.5 rounded">
                                    Select
                                </button>
                                <button onclick="document.getElementById('whitelist-name').value='${cleanPlayer.replace(/'/g, "\\'")}'; whitelistRemovePlayer()" class="text-xs bg-red-600/50 hover:bg-red-600 px-1.5 py-0.5 rounded">
                                    Remove
                                </button>
                            </div>
                        </div>
                    `;
                }
            });
            whitelistDiv.innerHTML = html;
        } else {
            whitelistDiv.innerHTML = '<p class="text-sm text-gray-400 text-center mt-16">Could not parse whitelist</p>';
        }
    }

    function parseBanList(message) {
        const cleanedMessage = message.replace(/\x1B\[[0-9;]*[mK]/g, '');
        const bansDiv = document.getElementById('bans-list');
        const countSpan = document.getElementById('bans-count');

        if (cleanedMessage.includes("There are no banned players")) {
            countSpan.textContent = '0';
            bansDiv.innerHTML = '<p class="text-sm text-gray-400 text-center mt-16">No players are banned</p>';
            return;
        }

        const bansMatch = cleanedMessage.match(/Banned players: (.*)/);
        if (bansMatch && bansMatch[1]) {
            const bans = bansMatch[1].split(', ').map(ban => ban.trim());
            countSpan.textContent = bans.length;
            
            let html = '';
            bans.forEach(ban => {
                const cleanBan = ban.replace(/\x1B\[[0-9;]*[mK]/g, '');
                if (cleanBan) {
                    const playerHead = `https://mc-heads.net/avatar/${encodeURIComponent(cleanBan)}/32`;
                    
                    html += `
                        <div class="ban-item">
                            <div class="flex items-center">
                                <div class="player-head" style="background-image: url('${playerHead}')"></div>
                                <span class="text-sm text-white ml-2">${cleanBan}</span>
                            </div>
                            <div class="flex justify-end mt-2">
                                <button onclick="document.getElementById('ban-name').value='${cleanBan.replace(/'/g, "\\'")}'" class="text-xs bg-indigo-600/50 hover:bg-indigo-600 px-1.5 py-0.5 rounded mr-1">
                                    Select
                                </button>
                                <button onclick="document.getElementById('ban-name').value='${cleanBan.replace(/'/g, "\\'")}'; pardonPlayer()" class="text-xs bg-green-600/50 hover:bg-green-600 px-1.5 py-0.5 rounded">
                                    Pardon
                                </button>
                            </div>
                        </div>
                    `;
                }
            });
            bansDiv.innerHTML = html;
        } else {
            bansDiv.innerHTML = '<p class="text-sm text-gray-400 text-center mt-16">Could not parse ban list</p>';
        }
    }

    function parseOpList(message) {
        const cleanedMessage = message.replace(/\x1B\[[0-9;]*[mK]/g, '');
        const opsDiv = document.getElementById('ops-list');
        const countSpan = document.getElementById('ops-count');

        if (cleanedMessage.includes("There are no operators")) {
            countSpan.textContent = '0';
            opsDiv.innerHTML = '<p class="text-sm text-gray-400 text-center mt-16">No players are OP</p>';
            return;
        }

        const opsMatch = cleanedMessage.match(/Operators: (.*)/);
        if (opsMatch && opsMatch[1]) {
            const ops = opsMatch[1].split(', ').map(op => op.trim());
            countSpan.textContent = ops.length;
            
            let html = '';
            ops.forEach(op => {
                const cleanOp = op.replace(/\x1B\[[0-9;]*[mK]/g, '');
                if (cleanOp) {
                    const playerHead = `https://mc-heads.net/avatar/${encodeURIComponent(cleanOp)}/32`;
                    
                    html += `
                        <div class="op-item">
                            <div class="flex items-center">
                                <div class="player-head" style="background-image: url('${playerHead}')"></div>
                                <span class="text-sm text-white ml-2">${cleanOp}</span>
                            </div>
                            <div class="flex justify-end mt-2">
                                <button onclick="document.getElementById('op-name').value='${cleanOp.replace(/'/g, "\\'")}'" class="text-xs bg-indigo-600/50 hover:bg-indigo-600 px-1.5 py-0.5 rounded mr-1">
                                    Select
                                </button>
                                <button onclick="document.getElementById('op-name').value='${cleanOp.replace(/'/g, "\\'")}'; deopPlayer()" class="text-xs bg-purple-600/50 hover:bg-purple-600 px-1.5 py-0.5 rounded">
                                    De-OP
                                </button>
                            </div>
                        </div>
                    `;
                }
            });
            opsDiv.innerHTML = html;
        } else {
            opsDiv.innerHTML = '<p class="text-sm text-gray-400 text-center mt-16">Could not parse OP list</p>';
        }
    }

    function showPlayerInfo(playerName) {
        currentSelectedPlayer = playerName;
        
        // Update the player info section
        const playerInfoDiv = document.getElementById('player-info');
        const playerHead = `https://mc-heads.net/avatar/${encodeURIComponent(playerName)}/64`;
        
        playerInfoDiv.innerHTML = `
            <div class="flex items-center mb-3">
                <div class="player-head" style="background-image: url('${playerHead}'); width: 48px; height: 48px;"></div>
                <div class="ml-3">
                    <h4 class="text-md font-medium text-white">${playerName}</h4>
                    <div class="flex items-center text-xs text-green-400">
                        <span class="status-indicator status-online"></span>
                        Online
                    </div>
                </div>
            </div>
            <div class="grid grid-cols-2 gap-2 text-xs">
                <div>
                    <span class="text-gray-400">Ping:</span>
                    <span class="text-white">${getRandomPing()}ms</span>
                </div>
                <div>
                    <span class="text-gray-400">Gamemode:</span>
                    <span class="text-white">Survival</span>
                </div>
                <div>
                    <span class="text-gray-400">Health:</span>
                    <div class="health-bar">
                        <div class="health-bar-fill" style="width: ${Math.floor(Math.random() * 100)}%"></div>
                    </div>
                </div>
                <div>
                    <span class="text-gray-400">Armor:</span>
                    <div class="armor-display">
                        <div class="armor-piece ${Math.random() > 0.5 ? 'filled' : ''}"></div>
                        <div class="armor-piece ${Math.random() > 0.5 ? 'filled' : ''}"></div>
                        <div class="armor-piece ${Math.random() > 0.5 ? 'filled' : ''}"></div>
                        <div class="armor-piece ${Math.random() > 0.5 ? 'filled' : ''}"></div>
                    </div>
                </div>
            </div>
            <div class="mt-3">
                <button onclick="document.getElementById('player-name').value='${playerName.replace(/'/g, "\\'")}'; switchTab('actions')" class="w-full px-3 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition text-sm">
                    Advanced Actions
                </button>
            </div>
        `;
    }

    function showPlayerInfoModal(playerName) {
        const modal = document.getElementById('playerInfoModal');
        document.getElementById('playerInfoTitle').textContent = playerName;
        
        const playerHead = `https://mc-heads.net/avatar/${encodeURIComponent(playerName)}/64`;
        
        document.getElementById('playerInfoContent').innerHTML = `
            <div class="flex flex-col items-center mb-4">
                <div class="player-head mb-2" style="background-image: url('${playerHead}'); width: 64px; height: 64px;"></div>
                <div class="flex items-center text-sm text-green-400">
                    <span class="status-indicator status-online mr-1"></span>
                    Online
                </div>
            </div>
            
            <div class="grid grid-cols-2 gap-4 text-sm mb-4">
                <div class="bg-white/5 p-3 rounded-lg">
                    <div class="text-gray-400 mb-1">Ping</div>
                    <div class="text-white">${getRandomPing()}ms</div>
                </div>
                <div class="bg-white/5 p-3 rounded-lg">
                    <div class="text-gray-400 mb-1">Gamemode</div>
                    <div class="text-white">Survival</div>
                </div>
                <div class="bg-white/5 p-3 rounded-lg">
                    <div class="text-gray-400 mb-1">Health</div>
                    <div class="health-bar">
                        <div class="health-bar-fill" style="width: ${Math.floor(Math.random() * 100)}%"></div>
                    </div>
                </div>
                <div class="bg-white/5 p-3 rounded-lg">
                    <div class="text-gray-400 mb-1">Armor</div>
                    <div class="armor-display">
                        <div class="armor-piece ${Math.random() > 0.5 ? 'filled' : ''}"></div>
                        <div class="armor-piece ${Math.random() > 0.5 ? 'filled' : ''}"></div>
                        <div class="armor-piece ${Math.random() > 0.5 ? 'filled' : ''}"></div>
                        <div class="armor-piece ${Math.random() > 0.5 ? 'filled' : ''}"></div>
                    </div>
                </div>
            </div>
            
            <div class="bg-white/5 p-3 rounded-lg mb-4">
                <div class="text-gray-400 mb-1">Effects</div>
                <div class="effects-display">
                    ${Math.random() > 0.5 ? '<div class="effect-icon" title="Speed">S</div>' : ''}
                    ${Math.random() > 0.5 ? '<div class="effect-icon" title="Jump Boost">J</div>' : ''}
                    ${Math.random() > 0.5 ? '<div class="effect-icon" title="Strength">St</div>' : ''}
                </div>
            </div>
            
            <div class="flex space-x-2">
                <button onclick="document.getElementById('player-name').value='${playerName.replace(/'/g, "\\'")}'; modal.classList.remove('active');" class="flex-1 px-3 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition text-sm">
                    Select
                </button>
                <button onclick="document.getElementById('player-name').value='${playerName.replace(/'/g, "\\'")}'; modal.classList.remove('active'); switchTab('actions');" class="flex-1 px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition text-sm">
                    Actions
                </button>
            </div>
        `;
        
        modal.classList.add('active');
    }

    function switchTab(tabId) {
        // Hide all tab contents
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // Show selected tab content
        document.getElementById(`${tabId}-tab`).classList.add('active');
        
        // Update tab styling
        document.querySelectorAll('.tab').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelector(`.tab[data-tab="${tabId}"]`).classList.add('active');
        
        // Scroll to top of player management section
        document.getElementById('player-management').scrollIntoView({ behavior: 'smooth' });
    }

    function getRandomPing() {
        // Generate a realistic ping between 20-150ms
        return Math.floor(Math.random() * 130) + 20;
    }

    function addToCommandHistory(command) {
        const historyElement = document.getElementById('command-history');

        // Check if the default message is still there
        if (historyElement.innerHTML.includes('No commands executed yet')) {
            historyElement.innerHTML = '';
        }

        // Create new entry
        const entry = document.createElement('div');
        entry.className = 'flex items-start';
        entry.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mt-0.5 mr-2 text-indigo-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
            <span class="text-indigo-300 font-mono text-xs break-all">${command}</span>
        `;

        // Prepend to keep recent commands at top
        historyElement.prepend(entry);

        // Limit to 10 commands
        if (historyElement.children.length > 10) {
            historyElement.removeChild(historyElement.lastChild);
        }
    }

    function showAlert(type, title, message) {
        const alert = document.getElementById('alertToast');
        const alertIcon = document.getElementById('alertIcon');
        const alertTitle = document.getElementById('alertTitle');
        const alertMessage = document.getElementById('alertMessage');

        // Set content
        alertTitle.textContent = title;
        alertMessage.textContent = message;

        // Set styles based on type
        alert.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 transform transition-all duration-300 ${
            type === 'error' ? 'bg-red-600 text-white' : 
            type === 'success' ? 'bg-emerald-600 text-white' : 
            type === 'warning' ? 'bg-yellow-600 text-white' :
            'bg-indigo-600 text-white'
        }`;

        // Set icon based on type
        if (type === 'error') {
            alertIcon.innerHTML = '<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>';
        } else if (type === 'success') {
            alertIcon.innerHTML = '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>';
        } else {
            alertIcon.innerHTML = '<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>';
        }

        // Show alert
        alert.classList.remove('hidden', 'opacity-0', 'translate-x-8');
        alert.classList.add('opacity-100', 'translate-x-0');

        // Hide after 5 seconds
        setTimeout(() => {
            alert.classList.add('opacity-0', 'translate-x-8');
            setTimeout(() => alert.classList.add('hidden'), 300);
        }, 5000);
    }

    // Terminal and WebSocket Code
    const baseTheme = {
        foreground: '#c5c9d1',
        background: 'rgba(0 0 0 / 0)',
        selection: '#5DA5D533',
        black: '#1E1E1D',
        brightBlack: '#262625',
        red: '#E54B4B',
        green: '#9ECE58',
        yellow: '#FAED70',
        blue: '#396FE2',
        magenta: '#BB80B3',
        cyan: '#2DDAFD',
        white: '#d0d0d0',
        brightBlack: 'rgba(255, 255, 255, 0.2)',
        brightRed: '#FF5370',
        brightGreen: '#C3E88D',
        brightYellow: '#FFCB6B',
        brightBlue: '#82AAFF',
        brightMagenta: '#C792EA',
        brightCyan: '#89DDFF',
        brightWhite: '#ffffff',
    };

    const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
    const instanceId = '<%= req.params.id %>';
    let commandHistory = [];
    let currentCommandIndex = -1;
    let term;
    let ws;
    let statusChart;
    let uptimeInterval;
    let currentUptime = 0;
    let lastStartTime = null;
    let serverStatus = 'offline';
    let uptimeHistory = [];
    let dailyUptime = {};

    // Persistent uptime storage
    const UPTIME_STORAGE_KEY = `server_uptime_${instanceId}`;
    const SERVER_STATUS_KEY = `server_status_${instanceId}`;
    const LAST_START_TIME_KEY = `last_start_time_${instanceId}`;
    const UPTIME_HISTORY_KEY = `uptime_history_${instanceId}`;

    function initWebSocket() {
        const port = window.location.port ? `:${window.location.port}` : '';
        ws = new WebSocket(`${protocol}://${window.location.hostname}${port}/console/${instanceId}`);

        ws.onopen = () => {
            console.log('WebSocket connected!');
            document.getElementById('cryptalisIsDown').classList.add('hidden');
        };

        ws.onmessage = (msg) => {
            // Check if this is a player list response
            if (msg.data.includes("There are") && msg.data.includes("players online")) {
                parsePlayerList(msg.data);
                return;
            }
            
            // Check if this is a whitelist response
            if (msg.data.includes("whitelisted players:") || msg.data.includes("There are no whitelisted players")) {
                parseWhitelist(msg.data);
                return;
            }
            
            // Check if this is a ban list response
            if (msg.data.includes("Banned players:") || msg.data.includes("There are no banned players")) {
                parseBanList(msg.data);
                return;
            }
            
            // Check if this is an OP list response
            if (msg.data.includes("Operators:") || msg.data.includes("There are no operators")) {
                parseOpList(msg.data);
                return;
            }

            const lines = msg.data.split('\n');
            let isFirstLine = true;
            let previousLineWasEmpty = false;

            lines.forEach(line => {
                const trimmedLine = line.trim();
                if (trimmedLine === '' && previousLineWasEmpty) return;

                if (!isFirstLine && !previousLineWasEmpty) {
                    term.write('\r\n');
                }

                term.write('\x1b[0m' + trimmedLine);

                if (trimmedLine.includes("Working on")) {
                    term.write('\r\n\u001b[1m\u001b[33m[panel] \u001b[0mreconnecting socket, hold on...');
                    term.clear();
                    ws.close();
                }

                if (trimmedLine.includes("Cryptalis instance appears to be down")) {
                    ws.close();
                    document.getElementById('cryptalisIsDown').classList.remove('hidden');
                } else {
                    document.getElementById('cryptalisIsDown').classList.add('hidden');
                }

                isFirstLine = false;
                previousLineWasEmpty = (trimmedLine === '');
            });
        };

        ws.onclose = () => {
            console.log('WebSocket connection closed, attempting to reconnect...');
            showAlert('warning', 'Connection Lost', 'Attempting to reconnect...');
            setTimeout(initWebSocket, 3000);
        };

        ws.onerror = (error) => {
            console.log('WebSocket encountered an error:', error, 'Attempting to reconnect...');
            document.getElementById('cryptalisIsDown').classList.remove('hidden');
            setTimeout(initWebSocket, 5000);
        };
    }

    function setupTerminal() {
        term = new Terminal({
            disableStdin: true,
            allowProposedApi: true,
            lineHeight: 1.35,
            rows: 19,
            cols: 100,
            fontFamily: 'Menlo, monospace',
            theme: baseTheme,
            allowTransparency: true,
            fontSize: 12,
        });
        term.open(document.getElementById('terminal'));
    }

    function sendCommand() {
        const inputElement = document.getElementById('input');
        const command = inputElement.value.trim();
        if (command && ws) {
            term.write('\u001b[1m\u001b[33m~ \u001b[0m' + command + '\r\n');
            ws.send(JSON.stringify({
                event: 'cmd',
                command: command,
                containerId: instanceId
            }));

            if (commandHistory.length === 10) {
                commandHistory.shift();
            }
            commandHistory.push(command);
            currentCommandIndex = commandHistory.length;

            addToCommandHistory(command);

            inputElement.value = '';
        }
    }

    function handleKeyUp(event) {
        const inputElement = document.getElementById('input');

        if (event.key === 'ArrowUp') {
            if (currentCommandIndex > 0) {
                currentCommandIndex--;
                inputElement.value = commandHistory[currentCommandIndex];
            }
            event.preventDefault();
        } else if (event.key === 'ArrowDown') {
            if (currentCommandIndex < commandHistory.length - 1) {
                currentCommandIndex++;
                inputElement.value = commandHistory[currentCommandIndex];
            } else {
                currentCommandIndex = commandHistory.length;
                inputElement.value = '';
            }
            event.preventDefault();
        } else if (event.key === 'Tab') {
            // Auto-complete player names
            const currentText = inputElement.value;
            const players = document.querySelectorAll('.player-card span:first-child');

            if (players.length > 0 && currentText) {
                const matches = Array.from(players)
                    .map(el => el.textContent.trim())
                    .filter(name => name.toLowerCase().startsWith(currentText.toLowerCase()));

                if (matches.length === 1) {
                    inputElement.value = matches[0] + ' ';
                    event.preventDefault();
                }
            }
        }
    }

    async function reinstall() {
        const instanceId = '<%= req.params.id %>';

        const loadingPopup = document.getElementById('loadingPopup');
        loadingPopup.classList.add('active');
        document.getElementById('loadingBar').style.width = '0%';
        document.getElementById('loadingMessage').textContent = 'Initializing...';

        try {
            const response = await fetch(`/instance/reinstall/${instanceId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            let progress = 0;
            const interval = setInterval(() => {
                if (progress < 90) {
                    progress += 10;
                    document.getElementById('loadingBar').style.width = `${progress}%`;
                    document.getElementById('loadingMessage').textContent = `Reinstalling server... ${progress}%`;
                } else {
                    clearInterval(interval);
                }
            }, 200);

            if (response.ok) {
                setTimeout(() => {
                    document.getElementById('loadingBar').style.width = '100%';
                    document.getElementById('loadingMessage').textContent = 'Server reinstalled successfully!';
                    setTimeout(() => {
                        loadingPopup.classList.remove('active');
                        window.location.href = `/instance/${instanceId}/settings`;
                    }, 1000);
                }, 2000);
            } else {
                alert('Error reinstalling server: ' + response.statusText);
                loadingPopup.classList.remove('active');
            }
        } catch (error) {
            console.error('Error during POST request:', error);
            alert('An error occurred.');
            loadingPopup.classList.remove('active');
        }
    }

    function createBackgroundChart(canvasId, type = 'line') {
        return new Chart(document.getElementById(canvasId).getContext('2d'), {
            type: type,
            data: {
                labels: Array(10).fill(''),
                datasets: [{
                    data: Array(10).fill(0),
                    borderColor: 'rgba(255, 255, 255, 0.1)',
                    backgroundColor: 'rgba(255, 255, 255, 0.05)',
                    borderWidth: 1,
                    pointRadius: 0,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false },
                    tooltip: { enabled: false }
                },
                scales: {
                    x: { display: false },
                    y: { 
                        display: false,
                        min: 0,
                        max: 100
                    }
                },
                animation: {
                    duration: 0
                }
            }
        });
    }

    function formatUptime(seconds) {
        const days = Math.floor(seconds / 86400);
        const hours = Math.floor((seconds % 86400) / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);

        return {
            days,
            hours,
            minutes,
            seconds: secs
        };
    }

    function updateUptimeDisplay(seconds) {
        const { days, hours, minutes, seconds: secs } = formatUptime(seconds);

        document.getElementById('uptime-days').textContent = `${days}d`;
        document.getElementById('uptime-hours').textContent = `${hours}h`;
        document.getElementById('uptime-minutes').textContent = `${minutes}m`;
        document.getElementById('uptime-seconds').textContent = `${secs}s`;

        // Update the bar (max 7 days for 100%)
        const uptimePercent = Math.min(100, (seconds / 604800) * 100); // 604800 = 7 days
        document.getElementById('uptime-bar').style.width = `${uptimePercent}%`;
        document.getElementById('uptime-percent').textContent = `${uptimePercent.toFixed(1)}% uptime`;

        // Save current uptime to localStorage
        saveUptimeData(seconds);
    }

    function saveUptimeData(seconds) {
        const today = new Date().toISOString().split('T')[0];
        const uptimeData = {
            uptime: seconds,
            lastUpdated: Date.now(),
            status: serverStatus,
            today: today
        };
        localStorage.setItem(UPTIME_STORAGE_KEY, JSON.stringify(uptimeData));

        // Update uptime history
        updateUptimeHistory(today, seconds);
    }

    function updateUptimeHistory(date, seconds) {
        let history = JSON.parse(localStorage.getItem(UPTIME_HISTORY_KEY)) || {};

        if (!history[date]) {
            history[date] = 0;
        }

        // Only update if the new value is higher than the stored one
        if (seconds > history[date]) {
            history[date] = seconds;
            localStorage.setItem(UPTIME_HISTORY_KEY, JSON.stringify(history));
        }
    }

    function loadUptimeData() {
        const savedData = localStorage.getItem(UPTIME_STORAGE_KEY);
        if (savedData) {
            return JSON.parse(savedData);
        }
        return null;
    }

    function saveServerStatus(status) {
        localStorage.setItem(SERVER_STATUS_KEY, status);
    }

    function loadServerStatus() {
        return localStorage.getItem(SERVER_STATUS_KEY) || 'offline';
    }

    function saveLastStartTime(time) {
        localStorage.setItem(LAST_START_TIME_KEY, time);
    }

    function loadLastStartTime() {
        return localStorage.getItem(LAST_START_TIME_KEY);
    }

    function startUptimeCounter(initialSeconds = 0) {
        // Clear any existing interval
        if (uptimeInterval) {
            clearInterval(uptimeInterval);
        }

        // Load saved uptime data if available
        const savedData = loadUptimeData();
        const today = new Date().toISOString().split('T')[0];

        if (savedData) {
            // Check if the saved data is from today
            if (savedData.today === today) {
                // If server was online when last saved, calculate the additional uptime since last update
                if (savedData.status === 'online') {
                    const timeSinceLastUpdate = Math.floor((Date.now() - savedData.lastUpdated) / 1000);
                    currentUptime = savedData.uptime + timeSinceLastUpdate;
                } else {
                    currentUptime = savedData.uptime;
                }
            } else {
                // Reset counter for new day
                currentUptime = initialSeconds;
            }
        } else {
            currentUptime = initialSeconds;
        }

        updateUptimeDisplay(currentUptime);

        // Start counting up
        uptimeInterval = setInterval(() => {
            currentUptime++;
            updateUptimeDisplay(currentUptime);
        }, 1000);
    }

    function stopUptimeCounter() {
        if (uptimeInterval) {
            clearInterval(uptimeInterval);
            uptimeInterval = null;
        }

        // Save the current uptime before resetting display
        saveUptimeData(currentUptime);
    }

    function resetUptimeCounter() {
        currentUptime = 0;
        updateUptimeDisplay(currentUptime);
        saveUptimeData(currentUptime);
    }

    function updateLastStartedTime() {
        const now = new Date();
        const options = { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric', 
            hour: '2-digit', 
            minute: '2-digit',
            hour12: true
        };
        const formattedTime = now.toLocaleString(undefined, options);
        document.getElementById('last-started').textContent = formattedTime;
        saveLastStartTime(formattedTime);
    }

    function updateStatus(stats) {
        const statusElement = document.getElementById('status');
        const statusDetails = document.getElementById('statusDetails');
        const ramUsageRaw = stats.memory_stats.usage / 1024 / 1024 || 0;

        if (ramUsageRaw > 1) {
            if (serverStatus !== 'online') {
                serverStatus = 'online';
                statusElement.textContent = 'Online';
                statusElement.className = 'mt-1 text-2xl font-medium tracking-tight text-emerald-500';
                statusDetails.textContent = 'Server is running and responsive';
                updateStatusChart('rgba(16, 185, 129, 0.1)', 'rgba(16, 185, 129, 0.2)');
                saveServerStatus('online');

                // Only start uptime counter if it's not already running
                if (!uptimeInterval) {
                    startUptimeCounter(stats.precise_uptime || 0);
                    updateLastStartedTime();
                }
            }
        } else {
            if (serverStatus !== 'offline') {
                serverStatus = 'offline';
                statusElement.textContent = 'Offline';
                statusElement.className = 'mt-1 text-2xl font-medium tracking-tight text-red-500';
                statusDetails.textContent = 'Server is not running';
                updateStatusChart('rgba(239, 68, 68, 0.1)', 'rgba(239, 68, 68, 0.2)');
                saveServerStatus('offline');
                stopUptimeCounter();
            }
        }

        // Update CPU and Memory
        if (stats.cpu_stats) {
            const cpuPercent = calculateCpuPercent(stats);
            document.getElementById('cpuUsage').textContent = `${cpuPercent.toFixed(1)}%`;
            document.getElementById('cpu-bar').style.width = `${cpuPercent}%`;
            document.getElementById('cpu-cores').textContent = stats.cpu_stats.online_cpus || '?';

            // CPU status indicator
            let cpuStatus = 'Normal';
            if (cpuPercent > 90) cpuStatus = 'High';
            else if (cpuPercent > 70) cpuStatus = 'Moderate';
            document.getElementById('cpu-status').textContent = cpuStatus;
        }

        if (stats.memory_stats) {
            const memUsage = stats.memory_stats.usage / 1024 / 1024;
            const memLimit = stats.memory_stats.limit / 1024 / 1024;
            const memPercent = (memUsage / memLimit) * 100;

            document.getElementById('memoryUsage').textContent = `${memUsage.toFixed(1)} MB / ${memLimit.toFixed(1)} MB`;
            document.getElementById('memory-bar').style.width = `${memPercent}%`;
            document.getElementById('memory-limit').textContent = `${memLimit.toFixed(1)} MB`;

            // Memory status indicator
            let memStatus = 'Normal';
            if (memPercent > 90) memStatus = 'High';
            else if (memPercent > 70) memStatus = 'Moderate';
            document.getElementById('memory-status').textContent = memStatus;
        }

        // Update TPS (simulated for now)
        if (ramUsageRaw > 1) {
            const tps = 20 - (Math.random() * 0.5); // Simulate good TPS
            document.getElementById('tps').textContent = tps.toFixed(1);
            document.getElementById('tps-bar').style.width = `${(tps / 20 * 100)}%`;

            // TPS status indicator
            let tpsStatus = 'Excellent';
            if (tps < 15) tpsStatus = 'Poor';
            else if (tps < 18) tpsStatus = 'Fair';
            document.getElementById('tps-status').textContent = tpsStatus;
        } else {
            document.getElementById('tps').textContent = '0.0';
            document.getElementById('tps-bar').style.width = '0%';
            document.getElementById('tps-status').textContent = 'Offline';
        }
    }

    function calculateCpuPercent(stats) {
        const cpuDelta = stats.cpu_stats.cpu_usage.total_usage - stats.precpu_stats.cpu_usage.total_usage;
        const systemDelta = stats.cpu_stats.system_cpu_usage - stats.precpu_stats.system_cpu_usage;
        const cpuPercent = (cpuDelta / systemDelta) * stats.cpu_stats.online_cpus * 100;
        return cpuPercent || 0;
    }

    function updateStatusChart(backgroundColor, borderColor) {
        if (statusChart && statusChart.data && statusChart.data.datasets && statusChart.data.datasets[0]) {
            statusChart.data.datasets[0].backgroundColor = backgroundColor;
            statusChart.data.datasets[0].borderColor = borderColor;
            statusChart.update();
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        setupTerminal();
        initWebSocket();

        // Initialize status chart
        statusChart = createBackgroundChart('statusChart');

        const inputElement = document.getElementById('input');
        inputElement.addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                sendCommand();
            }
        });

        inputElement.addEventListener('keydown', handleKeyUp);

        // Power button events
        ['start', 'stop', 'restart'].forEach(action => {
            document.getElementById(`${action}Button`).addEventListener('click', function () {
                if (ws) {
                    ws.send(JSON.stringify({
                        event: `power:${action}`,
                        containerId: instanceId
                    }));

                    showAlert('info', 'Action Sent', `Server ${action} command sent`);

                    // Update uptime counter based on action
                    if (action === 'start') {
                        updateLastStartedTime();
                        setTimeout(() => {
                            // Wait a few seconds for server to start before checking status
                            if (statsWs) statsWs.send('refresh');
                        }, 5000);
                    } else if (action === 'restart') {
                        // Reset uptime counter on restart
                        resetUptimeCounter();
                        setTimeout(() => {
                            if (statsWs) statsWs.send('refresh');
                        }, 5000);
                    } else if (action === 'stop') {
                        stopUptimeCounter();
                    }
                } else {
                    showAlert('error', 'Connection Error', 'Not connected to server');
                }
            });
        });

        // Tab switching
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', function() {
                switchTab(this.dataset.tab);
            });
        });

        // Ban duration selector
        document.getElementById('ban-duration').addEventListener('change', function() {
            const customContainer = document.getElementById('custom-ban-duration-container');
            if (this.value === 'custom') {
                customContainer.classList.remove('hidden');
            } else {
                customContainer.classList.add('hidden');
            }
        });

        // Player search functionality
        document.getElementById('player-name').addEventListener('input', function() {
            const searchTerm = this.value.trim().toLowerCase();
            const resultsContainer = document.getElementById('player-search-results');
            
            if (searchTerm.length < 2) {
                resultsContainer.style.display = 'none';
                return;
            }
            
            // Get all known players from cache or online list
            const players = Array.from(document.querySelectorAll('.player-card span:first-child'))
                .map(el => el.textContent.trim())
                .filter(name => name.toLowerCase().includes(searchTerm))
                .slice(0, 5); // Limit to 5 results
            
            if (players.length > 0) {
                resultsContainer.innerHTML = players.map(player => 
                    `<div class="player-search-result" onclick="document.getElementById('player-name').value='${player.replace(/'/g, "\\'")}'; this.parentNode.style.display='none'">${player}</div>`
                ).join('');
                resultsContainer.style.display = 'block';
            } else {
                resultsContainer.style.display = 'none';
            }
        });

        // Hide search results when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.player-search-container')) {
                document.getElementById('player-search-results').style.display = 'none';
            }
        });

        // Emoji picker for console
        const emojiPickerButton = document.getElementById('emoji-picker-button');
        const emojiPickerContainer = document.getElementById('emoji-picker-container');
        
        emojiPickerButton.addEventListener('click', function(e) {
            e.stopPropagation();
            emojiPickerContainer.style.display = emojiPickerContainer.style.display === 'block' ? 'none' : 'block';
        });
        
        document.addEventListener('click', function() {
            emojiPickerContainer.style.display = 'none';
        });
        
        emojiPickerContainer.addEventListener('click', function(e) {
            e.stopPropagation();
        });
        
        document.querySelector('emoji-picker').addEventListener('emoji-click', event => {
            const input = document.getElementById('input');
            input.value += event.detail.unicode;
            input.focus();
            emojiPickerContainer.style.display = 'none';
        });

        initStatsWebSocket();

        // Initial player list refresh
        setTimeout(refreshPlayerList, 2000);
        setTimeout(refreshWhitelist, 2500);
        setTimeout(refreshBansList, 3000);
        setTimeout(refreshOpsList, 3500);

        // Save name button
        document.getElementById('save').addEventListener('click', function() {
            const name = document.getElementById('name').value;
            window.location.href = '/instance/<%= req.params.id %>/change/name/' + name;
        });

        // Load saved last start time if available
        const savedStartTime = loadLastStartTime();
        if (savedStartTime) {
            document.getElementById('last-started').textContent = savedStartTime;
        }

        // Initialize uptime display based on saved status
        const savedStatus = loadServerStatus();
        if (savedStatus === 'online') {
            // Start with 0 seconds, the stats update will correct this shortly
            startUptimeCounter(0);
        } else {
            stopUptimeCounter();
        }
    });

    function isValidJson(str) {
        try {
          JSON.parse(str);
        } catch (e) {
          return false;
        }
        return true;
    }

    let statsWs;
    function initStatsWebSocket() {
        const port = window.location.port ? `:${window.location.port}` : '';
        statsWs = new WebSocket(`${protocol}://${window.location.hostname}${port}/stats/${instanceId}`);

        statsWs.onmessage = event => {
            if (isValidJson(event.data)) {
                const stats = JSON.parse(event.data);
                if (stats.error) {
                    console.error('Error fetching stats:', stats.error);
                    return;
                }

                updateStatus(stats);
            } else {
                console.log('Received non-JSON data:', event.data);
            }
        };

        statsWs.onclose = () => {
            console.log('WebSocket Stats connection closed, attempting to reconnect...');
            setTimeout(initStatsWebSocket, 3000);
        };

        statsWs.onerror = (error) => {
            console.log('WebSocket Stats encountered an error:', error);
            setTimeout(initStatsWebSocket, 5000);
        };
    }
</script>

<%- include('../components/footer') %>