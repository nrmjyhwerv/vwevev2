<%- include('../components/admin_template') %>
<main id="content" class="px-4 py-6 sm:px-6 lg:px-8">
  <div class="max-w-7xl mx-auto">
    <div class="mb-8">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 class="text-2xl font-bold text-white"><%= req.translations.auditLogs %></h1>
          <p class="mt-2 text-sm text-neutral-400 max-w-3xl">
            <%= req.translations.auditLogsText %>
          </p>
        </div>
      </div>

      <div class="mt-6 bg-gray-800/50 rounded-xl p-4 shadow-sm border border-gray-700/50">
        <div class="flex flex-col sm:flex-row sm:items-center gap-4 flex-wrap">
          <div class="flex-1 min-w-[200px]">
            <label for="actionFilter" class="block text-sm font-medium text-gray-300 mb-1">Action Type</label>
            <select id="actionFilter" class="block w-full pl-3 pr-10 py-2 text-base bg-gray-700/50 border-gray-600 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md text-white">
              <option value="">All Actions</option>
              <% const actions = [...new Set(audits.map(audit => audit.action))]; %>
              <% actions.forEach(action => { %>
                <option value="<%= action %>"><%= action %></option>
              <% }); %>
            </select>
          </div>

          <div class="flex-1 min-w-[200px]">
            <label for="dateRange" class="block text-sm font-medium text-gray-300 mb-1">Time Period</label>
            <select id="dateRange" class="block w-full pl-3 pr-10 py-2 text-base bg-gray-700/50 border-gray-600 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md text-white">
              <option value="1">Last 24 Hours</option>
              <option value="2">Last 2 Days</option>
              <option value="7" selected>Last Week</option>
              <option value="30">Last Month</option>
              <option value="90">Last 3 Months</option>
              <option value="">All Time</option>
            </select>
          </div>

          <div class="flex-1 min-w-[200px]">
            <label for="userFilter" class="block text-sm font-medium text-gray-300 mb-1">User</label>
            <select id="userFilter" class="block w-full pl-3 pr-10 py-2 text-base bg-gray-700/50 border-gray-600 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md text-white">
              <option value="">All Users</option>
              <% const users = [...new Set(audits.map(audit => audit.userId))]; %>
              <% users.forEach(userId => { %>
                <option value="<%= userId %>"><%= userId %></option>
              <% }); %>
            </select>
          </div>
        </div>

        <div class="mt-4 flex flex-wrap items-center gap-3">
          <button id="sortAsc" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            <svg class="-ml-0.5 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd" />
            </svg>
            Oldest First
          </button>
          <button id="sortDesc" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            <svg class="-ml-0.5 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
            Newest First
          </button>
          <button id="resetFilters" class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm leading-4 font-medium rounded-md text-gray-300 bg-transparent hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Reset Filters
          </button>
        </div>
      </div>
    </div>

    <div class="bg-gray-800/50 shadow rounded-xl overflow-hidden border border-gray-700/50">
      <% if (audits && audits.length > 0) { %>
        <div class="overflow-x-auto">
          <table id="auditTable" class="min-w-full divide-y divide-gray-700">
            <thead class="bg-gray-700/50">
              <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">User</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Action</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">IP Address</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Timestamp</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Details</th>
              </tr>
            </thead>
            <tbody id="auditBody" class="bg-transparent divide-y divide-gray-700">
              <% audits.forEach(function(audit) { %>
                <tr data-timestamp="<%= new Date(audit.timestamp).getTime() %>" data-action="<%= audit.action %>" data-user="<%= audit.userId %>">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="flex-shrink-0 h-10 w-10 rounded-full bg-gray-700 flex items-center justify-center text-gray-300 font-medium">
                        <%= audit.username ? audit.username.charAt(0).toUpperCase() : '?' %>
                      </div>
                      <div class="ml-4">
                        <div class="text-sm font-medium text-white">
                          <% if (audit.userId === req.user.userId) { %>
                            You <span class="text-gray-400">(<%= audit.userId %>)</span>
                          <% } else { %>
                            <%= audit.username || 'Unknown' %> <span class="text-gray-400">(<%= audit.userId %>)</span>
                          <% } %>
                        </div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                      <%= audit.action.includes('Failed') ? 'bg-red-900 text-red-100' : 
                         audit.action.includes('Login') ? 'bg-green-900 text-green-100' : 
                         audit.action.includes('Delete') ? 'bg-red-800 text-red-100' : 
                         audit.action.includes('Create') ? 'bg-blue-900 text-blue-100' : 
                         'bg-purple-900 text-purple-100' %>">
                      <%= audit.action %>
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                    <%= audit.ip %>
                    <% if (audit.ipLocation) { %>
                      <span class="text-gray-500 text-xs block"><%= audit.ipLocation %></span>
                    <% } %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                    <div class="text-gray-300"><%= new Date(audit.timestamp).toLocaleDateString() %></div>
                    <div class="text-gray-500"><%= new Date(audit.timestamp).toLocaleTimeString() %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                    <button class="text-indigo-400 hover:text-indigo-300 details-btn" data-details="<%= JSON.stringify(audit.details || {}) %>">
                      View Details
                    </button>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
        <div class="bg-gray-800/50 px-6 py-3 flex items-center justify-between border-t border-gray-700">
          <div class="flex-1 flex justify-between sm:hidden">
            <button id="mobilePrevPage" class="relative inline-flex items-center px-4 py-2 border border-gray-700 text-sm font-medium rounded-md text-gray-300 bg-gray-700 hover:bg-gray-600">
              Previous
            </button>
            <button id="mobileNextPage" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-700 text-sm font-medium rounded-md text-gray-300 bg-gray-700 hover:bg-gray-600">
              Next
            </button>
          </div>
          <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p class="text-sm text-gray-400">
                Showing <span class="font-medium" id="startItem">1</span> to <span class="font-medium" id="endItem"><%= Math.min(10, audits.length) %></span> of <span class="font-medium" id="totalItems"><%= audits.length %></span> results
              </p>
            </div>
            <div>
              <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                <button id="prevPage" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-700 bg-gray-700 text-sm font-medium text-gray-300 hover:bg-gray-600">
                  <span class="sr-only">Previous</span>
                  <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                  </svg>
                </button>
                <div id="pageNumbers" class="flex">
                  <!-- Page numbers will be inserted here by JavaScript -->
                </div>
                <button id="nextPage" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-700 bg-gray-700 text-sm font-medium text-gray-300 hover:bg-gray-600">
                  <span class="sr-only">Next</span>
                  <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                  </svg>
                </button>
              </nav>
            </div>
          </div>
        </div>
      <% } else { %>
        <div class="text-center py-12">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <h3 class="mt-2 text-sm font-medium text-white">No audit logs found</h3>
          <p class="mt-1 text-sm text-gray-400">Try adjusting your search or filter to find what you're looking for.</p>
          <div class="mt-6">
            <button id="resetAllFilters" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Reset all filters
            </button>
          </div>
        </div>
      <% } %>
    </div>
  </div>
</main>
<%- include('../components/head') %>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // DOM Elements
    const actionFilter = document.getElementById('actionFilter');
    const dateRange = document.getElementById('dateRange');
    const userFilter = document.getElementById('userFilter');
    const sortAsc = document.getElementById('sortAsc');
    const sortDesc = document.getElementById('sortDesc');
    const resetFilters = document.getElementById('resetFilters');
    const resetAllFilters = document.getElementById('resetAllFilters');
    const tableBody = document.getElementById('auditBody');
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    const mobilePrevPage = document.getElementById('mobilePrevPage');
    const mobileNextPage = document.getElementById('mobileNextPage');
    const pageNumbers = document.getElementById('pageNumbers');
    const startItem = document.getElementById('startItem');
    const endItem = document.getElementById('endItem');
    const totalItems = document.getElementById('totalItems');
    const exportBtn = document.getElementById('exportBtn');
    const detailsModal = document.getElementById('detailsModal');
    const modalContent = document.getElementById('modalContent');
    const closeModal = document.getElementById('closeModal');

    // State
    let currentPage = 1;
    const rowsPerPage = 10;
    const originalRows = Array.from(tableBody.querySelectorAll('tr'));
    let filteredRows = [...originalRows];

    // Initialize
    updatePagination();
    renderPage();

    // Event Listeners
    actionFilter.addEventListener('change', applyFilters);
    dateRange.addEventListener('change', applyFilters);
    userFilter.addEventListener('change', applyFilters);
    sortAsc.addEventListener('click', () => sortTable(true));
    sortDesc.addEventListener('click', () => sortTable(false));
    resetFilters.addEventListener('click', resetAll);
    resetAllFilters.addEventListener('click', resetAll);
    prevPage.addEventListener('click', goToPrevPage);
    nextPage.addEventListener('click', goToNextPage);
    mobilePrevPage.addEventListener('click', goToPrevPage);
    mobileNextPage.addEventListener('click', goToNextPage);
    exportBtn.addEventListener('click', exportData);
    closeModal.addEventListener('click', () => detailsModal.classList.add('hidden'));

    // Details button click handlers
    document.querySelectorAll('.details-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const details = JSON.parse(this.getAttribute('data-details'));
        modalContent.textContent = JSON.stringify(details, null, 2);
        detailsModal.classList.remove('hidden');
      });
    });

    // Functions
    function applyFilters() {
      const selectedAction = actionFilter.value;
      const selectedRange = parseInt(dateRange.value) || Infinity;
      const selectedUser = userFilter.value;
      const now = new Date().getTime();

      filteredRows = originalRows.filter(row => {
        const action = row.getAttribute('data-action');
        const userId = row.getAttribute('data-user');
        const timestamp = parseInt(row.getAttribute('data-timestamp'));
        const dateDiff = (now - timestamp) / (1000 * 60 * 60 * 24);

        return (selectedAction === '' || action === selectedAction) &&
               (selectedUser === '' || userId === selectedUser) &&
               dateDiff <= selectedRange;
      });

      currentPage = 1;
      updatePagination();
      renderPage();
    }

    function sortTable(ascending) {
      filteredRows.sort((a, b) => {
        const timestampA = parseInt(a.getAttribute('data-timestamp'));
        const timestampB = parseInt(b.getAttribute('data-timestamp'));
        return ascending ? timestampA - timestampB : timestampB - timestampA;
      });

      renderPage();
    }

    function resetAll() {
      actionFilter.value = '';
      dateRange.value = '7';
      userFilter.value = '';
      applyFilters();
    }

    function renderPage() {
      const start = (currentPage - 1) * rowsPerPage;
      const end = start + rowsPerPage;
      const paginatedRows = filteredRows.slice(start, end);

      tableBody.innerHTML = '';
      paginatedRows.forEach(row => tableBody.appendChild(row.cloneNode(true)));

      // Reattach event listeners to new buttons
      document.querySelectorAll('.details-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const details = JSON.parse(this.getAttribute('data-details'));
          modalContent.textContent = JSON.stringify(details, null, 2);
          detailsModal.classList.remove('hidden');
        });
      });

      // Update pagination info
      startItem.textContent = start + 1;
      endItem.textContent = Math.min(end, filteredRows.length);
      totalItems.textContent = filteredRows.length;

      // Disable/enable pagination buttons
      prevPage.disabled = currentPage === 1;
      nextPage.disabled = end >= filteredRows.length;
      mobilePrevPage.disabled = currentPage === 1;
      mobileNextPage.disabled = end >= filteredRows.length;
    }

    function updatePagination() {
      pageNumbers.innerHTML = '';
      const pageCount = Math.ceil(filteredRows.length / rowsPerPage);

      // Always show first page
      addPageNumber(1);

      // Show ellipsis if needed after first page
      if (currentPage > 3) {
        const ellipsis = document.createElement('span');
        ellipsis.className = 'relative inline-flex items-center px-4 py-2 border border-gray-700 bg-gray-800 text-sm font-medium text-gray-300';
        ellipsis.textContent = '...';
        pageNumbers.appendChild(ellipsis);
      }

      // Show current page and neighbors
      const start = Math.max(2, currentPage - 1);
      const end = Math.min(pageCount - 1, currentPage + 1);

      for (let i = start; i <= end; i++) {
        addPageNumber(i);
      }

      // Show ellipsis if needed before last page
      if (currentPage < pageCount - 2) {
        const ellipsis = document.createElement('span');
        ellipsis.className = 'relative inline-flex items-center px-4 py-2 border border-gray-700 bg-gray-800 text-sm font-medium text-gray-300';
        ellipsis.textContent = '...';
        pageNumbers.appendChild(ellipsis);
      }

      // Always show last page if different from first
      if (pageCount > 1) {
        addPageNumber(pageCount);
      }
    }

    function addPageNumber(page) {
      const button = document.createElement('button');
      button.className = `relative inline-flex items-center px-4 py-2 border text-sm font-medium ${currentPage === page ? 'z-10 bg-indigo-600 border-indigo-600 text-white' : 'bg-gray-800 border-gray-700 text-gray-300 hover:bg-gray-700'}`;
      button.textContent = page;
      button.addEventListener('click', () => {
        currentPage = page;
        renderPage();
        updatePagination();
      });
      pageNumbers.appendChild(button);
    }

    function goToPrevPage() {
      if (currentPage > 1) {
        currentPage--;
        renderPage();
        updatePagination();
      }
    }

    function goToNextPage() {
      if (currentPage * rowsPerPage < filteredRows.length) {
        currentPage++;
        renderPage();
        updatePagination();
      }
    }

    function exportData() {
      // Create CSV content
      let csvContent = "User ID,Username,Action,IP Address,Timestamp,Details\n";

      filteredRows.forEach(row => {
        const userId = row.getAttribute('data-user');
        const username = row.querySelector('td:first-child div div div').textContent.trim().split(' (')[0];
        const action = row.getAttribute('data-action');
        const ip = row.querySelector('td:nth-child(3)').textContent.split('\n')[0].trim();
        const timestamp = new Date(parseInt(row.getAttribute('data-timestamp'))).toISOString();
        const details = row.querySelector('.details-btn').getAttribute('data-details');

        csvContent += `"${userId}","${username}","${action}","${ip}","${timestamp}","${details.replace(/"/g, '""')}"\n`;
      });

      // Create download link
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.setAttribute('href', url);
      link.setAttribute('download', `audit_logs_${new Date().toISOString().slice(0, 10)}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }

    // Close modal when clicking outside
    detailsModal.addEventListener('click', (e) => {
      if (e.target === detailsModal) {
        detailsModal.classList.add('hidden');
      }
    });
  });
</script>